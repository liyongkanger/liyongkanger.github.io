<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>康康的博客</title>
  
  
  <link href="https://yoursite.com/atom.xml" rel="self"/>
  
  <link href="https://yoursite.com/"/>
  <updated>2020-07-04T07:59:16.014Z</updated>
  <id>https://yoursite.com/</id>
  
  <author>
    <name>努力的康康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搜索与图论</title>
    <link href="https://yoursite.com/2020/07/04/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/"/>
    <id>https://yoursite.com/2020/07/04/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/</id>
    <published>2020-07-04T07:58:34.000Z</published>
    <updated>2020-07-04T07:59:16.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><p>排列数字， 八皇后问题</p><ol><li>定义结束边界</li><li>枚举所有情况</li><li>枚举的过程中下一个恢复现场</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="comment">//结束标记</span></span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">            System.out.println(path[i] + <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 迭代n次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ;i  ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        st[i] = <span class="keyword">true</span>; <span class="comment">// 确认i被遍历过</span></span><br><span class="line">        path[u] = i;</span><br><span class="line">        dfs(u + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//恢复现场</span></span><br><span class="line">        path[u] = <span class="number">0</span>;</span><br><span class="line">        st[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><p>迷宫问题,八数码</p><ol><li>创建一个队列</li><li>将首结点进入队列并且设置st[0][0] = true</li><li>while(!q.isEmpty()) 循环迭代知道队列为空</li><li>在循环中增加逻辑条件增加</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[][] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Queue&lt;Pair&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(<span class="keyword">new</span> Pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> size = q.size();</span><br><span class="line">        <span class="keyword">while</span>(size -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            Pair cur = q.poll();<span class="comment">// 取出队头并且弹出</span></span><br><span class="line">            <span class="keyword">int</span> i = cur.i ;</span><br><span class="line">            <span class="keyword">int</span> j = cur.j;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++)&#123;</span><br><span class="line">                <span class="keyword">int</span> nx = i + dx[k];</span><br><span class="line">                <span class="keyword">int</span> ny = j + dy[k];</span><br><span class="line">                <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || g[nx][ny] == <span class="number">1</span> || st[nx][ny]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//设置出口</span></span><br><span class="line">                <span class="keyword">if</span>(nx == n -<span class="number">1</span> &amp;&amp; ny == m -<span class="number">1</span>) <span class="keyword">return</span> step + <span class="number">1</span>;</span><br><span class="line">                st[nx][ny] = <span class="keyword">true</span>;</span><br><span class="line">                q.add(<span class="keyword">new</span> Pair(nx, ny));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------</span><br><span class="line">    二维矩阵输入</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i  ++)&#123;</span><br><span class="line">        String[] arr = in.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; j++)&#123;</span><br><span class="line">            g[i][j] = Integer.parseInt(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="树的深度优先遍历"><a href="#树的深度优先遍历" class="headerlink" title="树的深度优先遍历"></a>树的深度优先遍历</h3><p>树的重心</p><ol><li><p>st[u] = true 遍历过</p></li><li><p>迭代树的每个分枝 </p></li><li><p>迭代中的逻辑 取出分枝中的每个值 设立boolean是否遍历过 继续迭代</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> cur =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[u]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j =e[i];</span><br><span class="line">        <span class="keyword">if</span>(st[j]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t  = dfs(j);</span><br><span class="line">        cur += t;</span><br><span class="line">        max = Math.max(max,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ano = n - cur;</span><br><span class="line">    max = Math.min(res, ano);</span><br><span class="line">    res = Math.min(res,max);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u] = <span class="keyword">true</span>; <span class="comment">// 表示u被遍历过</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[u]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) dfs(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树的广度优先遍历"><a href="#树的广度优先遍历" class="headerlink" title="树的广度优先遍历"></a>树的广度优先遍历</h3><p>图中点的层次</p><ol><li><p>设立队列</p></li><li><p>将队头入队，初始化所有</p></li><li><p>while(!q.isEmpty()) 循环到队列为空 </p></li><li><p>循环中逻辑取出队列中每一个数 然后遍历这个数的分枝</p></li><li><p>遍历数的分枝中的逻辑结构 将分枝的点入队</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(<span class="number">1</span>);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">       <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = h[cur]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">           <span class="keyword">int</span> j =e[i];</span><br><span class="line">           <span class="keyword">if</span>(d[j] != -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">           d[j] = d[cur] + <span class="number">1</span>;</span><br><span class="line">           q.add(j);</span><br><span class="line">       &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[n];</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line">    queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    st[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    q.add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">  <span class="keyword">int</span> t = q.poll();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">            st[j] = <span class="keyword">true</span>;</span><br><span class="line">            q.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>有向图才有拓扑序列 起点在重点前面就是拓扑序列</p><ol><li>手写一个队列</li><li>入度为0的点入队</li><li>while(hh &lt;= tt) 迭代 里面遍历每个点的分枝   将遍历到的点入度-1 ，减为0入队</li><li>当tt 为 n-1 拓扑排序存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hh = <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//d[i] 存储点i的入度  度为0 入队</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="number">0</span>) q[++ tt] = i;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(-- d[j] == <span class="number">0</span>)</span><br><span class="line">                   q[++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果所有点都入队了就存在拓扑序列，否则不存在拓扑排序</span></span><br><span class="line">    <span class="keyword">return</span> tt == n -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//将入度为0的点放入队列中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ru[i] == <span class="number">0</span>) q[++ tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">     <span class="keyword">int</span> t = q[hh ++];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != -<span class="number">1</span>; i ++)&#123;</span><br><span class="line">          <span class="keyword">int</span> j = ne[i];</span><br><span class="line">          ru[j] --;</span><br><span class="line">          <span class="keyword">if</span>(ru[j] == <span class="number">0</span>)&#123;</span><br><span class="line">              q[++ tt] = j;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(tt == (n - <span class="number">1</span>)) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) System.out.print(q[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素dijkstra算法"><a href="#朴素dijkstra算法" class="headerlink" title="朴素dijkstra算法"></a>朴素dijkstra算法</h3><p>单源最短路且边权为正数O(n^2)</p><ol><li>初始化dist最短路数组</li><li>迭代n - 1次在为确定的最短路的点中寻找距离0位置距离最小的点 dist[t]  &gt; dist[j] t = j</li><li>用t更新0到其他点的距离 min(dist[j], dist[t] + g [t] [j] )</li><li>t 点为最短路的点 st[t] =true;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> g[N][N]; <span class="comment">//存储每条边</span></span><br><span class="line"><span class="keyword">int</span> dist[N]; <span class="comment">//存储1到每个点的最短路</span></span><br><span class="line"><span class="keyword">boolean</span> st[N]; <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路 如果不存在则返回 -1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Arrays.fill(dist, <span class="number">0x3f</span>);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = -<span class="number">1</span>; <span class="comment">// 在未确定的最短路的点中， 寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == -<span class="number">1</span> || dist[t] &gt; dist[j] ))</span><br><span class="line">                  t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">            dist[j] = Math.min(dist[j], dist[t] + g[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        st[t] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f3f</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化版dijkstra"><a href="#堆优化版dijkstra" class="headerlink" title="堆优化版dijkstra"></a>堆优化版dijkstra</h3><p>O(mlogn)</p><ol><li>创建堆（优先队列）PriorityQueue </li><li>初始化dist数组， 将0,1加入队列中</li><li>while(!q.isEmpyt())迭代</li><li>弹出队中的点得到编号和距离</li><li>用t更新其他的点（dist[j] = min(dist[j] , distance + w[i]）将分枝结点的编号和距离入堆</li><li>如果最后dist[n] 中不为-1则求出最短距离</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PriorityQueue&lt;PIIs&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;();<span class="comment">// 优先队列当堆使用</span></span><br><span class="line">    Arrays.fill(dist, INF);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    queue.add(<span class="keyword">new</span> PIIs(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//1. 弹出队中的点得到编号和距离</span></span><br><span class="line">        PIIs p = queue.poll();</span><br><span class="line">        <span class="keyword">int</span> t = p.getSecond();<span class="comment">// 编号</span></span><br><span class="line">        <span class="keyword">int</span> distance = p.getFirst();<span class="comment">// 距离</span></span><br><span class="line">        <span class="keyword">if</span>(st[t])  <span class="keyword">continue</span>;</span><br><span class="line">        st[t] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//2.用t更新其他的点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            dist[j] = Math.min(dist[j], distance + w[i]);</span><br><span class="line">            queue.add(<span class="keyword">new</span> PIIs(dist[j], j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reutrn dist[n] ==INF ? -<span class="number">1</span> : dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PIIs</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">PIIs</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first; <span class="comment">// 距离</span></span><br><span class="line">    <span class="keyword">int</span> second; <span class="comment">//编号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSecond</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.getSecond;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PIIs</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> second)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(PIIs o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(first, o.first);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bellman-ford"><a href="#Bellman-ford" class="headerlink" title="Bellman-ford"></a>Bellman-ford</h3><p>解决单源最短路径中负权重问题O(nm)</p><p>有边数限制的最短路</p><ol><li>初始化dist数组</li><li>2重循环 if(dist[b] &gt; dist[a] + w) dist[b] = dist[a] + w</li><li>判断dist[n] &gt; 0x3f3f3f3f / 2  为什么/2 是因为权数可能为负数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m ; <span class="comment">//n 表示点数， m表示边数</span></span><br><span class="line"><span class="keyword">int</span> dist[N]; <span class="comment">//1到x的最短距离</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, w; <span class="comment">// a表示出点 b表示入点, w 表示边的权重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求 1 到n 的最短距离， 如果无法从1 走到n则返回 -1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bellman_ford</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Arrays.fill(dist, <span class="number">0x3f</span>);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果n次跌单仍然会松弛三角不等式，就说明存在一条长度为n+1的最短路径 由于抽屉原理则路径中至少存在2个相同点，说明图存在负权回路</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = edges[j].a;</span><br><span class="line">            <span class="keyword">int</span> b = edges[j].b;</span><br><span class="line">            <span class="keyword">int</span> w = edges[j].w;</span><br><span class="line">            <span class="keyword">if</span>(dist[b] &gt; dist[a] + w)</span><br><span class="line">                dist[b] = dist[a] + w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="keyword">return</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bellman_ford</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Arrays.fill(dist, INF);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//边数限制k次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k ; i++)&#123;</span><br><span class="line">        <span class="comment">//复制原数组</span></span><br><span class="line">        back = Arrays.copyOf(dist, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            Edge edge = edges[j];</span><br><span class="line">            <span class="keyword">int</span> a = edge.a;</span><br><span class="line">            <span class="keyword">int</span> b = edge.b;</span><br><span class="line">            <span class="keyword">int</span> w = edge.w;</span><br><span class="line">            dist[b] = Math.min(dist[b], back[a] + w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] &gt; INF / <span class="number">2</span>) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> System.out.println(dist[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spfa算法-bellman优化"><a href="#Spfa算法-bellman优化" class="headerlink" title="Spfa算法(bellman优化)"></a>Spfa算法(bellman优化)</h3><p>O(m) 求最短路 判断负环</p><ol><li>初始化dist，st数组代表当前点是否入队</li><li>while(!q.isEmpty())循环迭代</li><li>取出队头  设立st[t] = false 遍历所有分枝结点 dist[j] = dist[t] + w[i];</li><li>如果队伍中没有分枝结点则将分枝结点入队</li><li>判断dist[n] == 0x3f</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n; <span class="comment">//总点数</span></span><br><span class="line"><span class="keyword">int</span> h[N], w[N],e[N],ne[N],idx; <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">boolean</span> st[N]; <span class="comment">// 是否入队</span></span><br><span class="line"><span class="comment">// 求 1 号点到n号点的最短路，如果从1号店无法走到n 则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Arrays.fill(dist, <span class="number">0x3f</span>);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">        st[cur] = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[cur]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[cur] + w[i])&#123;</span><br><span class="line">                dist[j] = dist[cur] + w[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                q.add(j);</span><br><span class="line">                st[j] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n] == INF ? -<span class="number">1</span> : dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断负环</p><ol><li>创建队列将所有的点加入队列</li><li>while(!q.isEmpty())迭代队列</li><li>得到队头设置st布尔数组  迭代分枝</li><li>得到每个分枝结点 得到最短路径dist[j] = dist[t] + w[i]; cnt[j] = cnt[t] + 1;</li><li>判断是否是负环寻路 cnt[j] &gt;= n；</li><li>如果分枝没有入队则入队并且设置st布尔数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n; <span class="comment">//总结点</span></span><br><span class="line"><span class="keyword">int</span> h[N], w[N], e[N],ne[N], idx;</span><br><span class="line"><span class="keyword">int</span> dist[N], cnt[N]; <span class="comment">//cnt[x]存储1到x的最短距离经过的点数</span></span><br><span class="line"><span class="keyword">boolean</span> st[N]; <span class="comment">//每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">//将所有点加入到队列中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        q.add(i);</span><br><span class="line">        st[i] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">int</span> cur =q.poll();</span><br><span class="line">        st[cur] = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[cur]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[cur] + w[i])&#123;</span><br><span class="line">                dist[j] = dist[cur] + w[i];</span><br><span class="line">                cnt[j] = cnt[cur] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[j] &gt;= n) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.add(j);</span><br><span class="line">                    st[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多源最短路-Floyd算法"><a href="#多源最短路-Floyd算法" class="headerlink" title="多源最短路 Floyd算法"></a>多源最短路 Floyd算法</h3><p>1.初始化最短距离2位数组</p><p>2.3重循环判断最短路 g[i] [j] = Math.min(g[i] [k] + g[k] [ j] ,  g[i] [j]);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i  = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == j) g[i][j] = <span class="number">0</span>;<span class="comment">//自己到自己的距离为0</span></span><br><span class="line">        <span class="keyword">else</span> g[i][j] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//算法g[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">                g[i][j] = Math.min(g[i][k] + g[k][j], g[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素版最小生成树Prime算法"><a href="#朴素版最小生成树Prime算法" class="headerlink" title="朴素版最小生成树Prime算法"></a>朴素版最小生成树Prime算法</h3><p>O(n^2)</p><ol><li>初始化dist 设立res记录权值</li><li>循环n次代表向集合中增加n个结点</li><li>每次选择距离集合最近的点， 判断如果此时这个未加入的点到集合的距离为负无穷则最小生成树不存在</li><li>使用新加入的点去更新其他结点到集合的距离for循环 dist[j] &gt;g[t] [j]</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n; <span class="comment">//表示点数</span></span><br><span class="line"><span class="keyword">int</span> g[N][N]; <span class="comment">//邻接矩阵存储所有的边</span></span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">boolean</span> st[N]; <span class="comment">//存储每个点是否已经在生成树中</span></span><br><span class="line"><span class="comment">//如果图不连通则返回INF 否则则返回最小生成树的边权之和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Arrays.fill(dist, <span class="number">0x3f</span>);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">//记录权值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">//找到距离集合最近的点</span></span><br><span class="line">        <span class="keyword">int</span> t = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((t == -<span class="number">1</span> || dist[j] &lt;dist[t]) &amp;&amp; !st[j])&#123;</span><br><span class="line">                t = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; dist[t] == max) <span class="keyword">return</span> max;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) res += dist[t]; <span class="comment">// 先加入权值在更新这个点</span></span><br><span class="line">        st[t] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//新加入的t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; g[t][j])</span><br><span class="line">                 dist[j] = g[t][j];</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal算法-最小生成树"><a href="#Kruskal算法-最小生成树" class="headerlink" title="Kruskal算法 最小生成树"></a>Kruskal算法 最小生成树</h3><p>mlogn</p><p>kruskal 算法求最小生成树的思路  每一次选取权值最小的边 如果选择的边对应的两个顶点<br>已经在一个连通块中就不加这条边最后判断加边的数量登不等于顶点数减1 如果不等则不是最小生成树</p><ol><li>现将所有的边按权重从小到大排序</li><li>枚举每条边a,b如果a,b不天通则加入集合， 利用并查集</li><li>如果边的数量不等于点数减1 则没有最小生成树 cnt &lt; n -1 return INF</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m; <span class="comment">//点， 边</span></span><br><span class="line"><span class="keyword">int</span> p[N] <span class="comment">//并查集父亲结点的数组</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.c - o.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[x] != x) p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(edge, <span class="number">0</span>, m);</span><br><span class="line">     <span class="comment">//枚举   </span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = edge[i].a;</span><br><span class="line">            <span class="keyword">int</span> b = edge[i].b;</span><br><span class="line">            <span class="keyword">int</span> w = edge[i].c;</span><br><span class="line">            a = find(a);</span><br><span class="line">            b = find(b);</span><br><span class="line">            <span class="keyword">if</span>(a != b)&#123;</span><br><span class="line">                p[a] = b;</span><br><span class="line">                res += w;</span><br><span class="line">                cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="染色法判别二分图"><a href="#染色法判别二分图" class="headerlink" title="染色法判别二分图"></a>染色法判别二分图</h3><ol><li>初始化color数组</li><li>遍历其他分枝，得到其他分枝的值</li><li>如果染色数组没有颜色则递归下一个并且2染色相反</li><li>如果染色数组已经染色1则返回false</li><li>最后返回true</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> color[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span>&#125;</span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[u]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[j];</span><br><span class="line">        <span class="keyword">if</span>(color[j] == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(j, !c)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[j] == c) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Arrays.fill(color, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">         <span class="keyword">if</span>(color[i] == -<span class="number">1</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(!dfs(i, <span class="number">0</span>))&#123;</span><br><span class="line">                 flag = <span class="keyword">false</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匈牙利算法-二分图的最大匹配"><a href="#匈牙利算法-二分图的最大匹配" class="headerlink" title="匈牙利算法 二分图的最大匹配"></a>匈牙利算法 二分图的最大匹配</h3><ol><li>遍历 x的所有分枝</li><li>取出所有分枝结点，查看在第二个集合中是否被遍历过</li><li>如果没有则 查看match是否为0 或者是否有其他可以匹配的点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n1, n2; <span class="comment">//n1 代表第一个集合， n2代表第二个集合的点数</span></span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="keyword">int</span> match[N];<span class="comment">// 存储第二个集合中的每个点当前的第一个集合匹配的点是哪个</span></span><br><span class="line"><span class="keyword">boolean</span> st[N]; <span class="comment">//第二个集合中的点是否被遍历过</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; i != -<span class="number">1</span>; i = ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(st[j] == <span class="keyword">false</span>)&#123;</span><br><span class="line">            st[j] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(match[j] == <span class="number">0</span> || find(match[j]))&#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求最大匹配数  一次枚举第一个集合能否匹配到第二个结合中的点</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i ++)&#123;</span><br><span class="line">    Arrays.fill(st, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span>(find(i)) res ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算法思想&quot;&gt;&lt;a href=&quot;#算法思想&quot; class=&quot;headerlink&quot; title=&quot;算法思想&quot;&gt;&lt;/a&gt;算法思想&lt;/h2&gt;&lt;h3 id=&quot;dfs&quot;&gt;&lt;a href=&quot;#dfs&quot; class=&quot;headerlink&quot; title=&quot;dfs&quot;&gt;&lt;/a&gt;df</summary>
      
    
    
    
    
    <category term="算法" scheme="https://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法模板</title>
    <link href="https://yoursite.com/2020/04/20/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    <id>https://yoursite.com/2020/04/20/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-04-20T11:47:44.000Z</published>
    <updated>2020-04-20T11:48:42.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><h4 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h4><p>快排：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[],<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; ]; <span class="comment">// 1. 设置一个点</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j --; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i],q[j]);</span><br><span class="line">    &#125; <span class="comment">//2. 排序</span></span><br><span class="line">    quick_sort(q, l, j); <span class="comment">// 3.递归左右区间</span></span><br><span class="line">    quick_sort(q, j + <span class="number">1</span>， r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归并：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; <span class="comment">// 1. 设置中点</span></span><br><span class="line">    merge_sort(q, l, mid); <span class="comment">//2.递归左右区间</span></span><br><span class="line">    merge_sort(q,mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = l, r = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &lt;= mid &amp;&amp; j &lt;= r)<span class="comment">//3.两个数组并归为一个数组</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span> (q[i] &lt; q[j]) tmp[k ++] = q[i ++];</span><br><span class="line">       <span class="keyword">else</span>    tmp[k ++] = q[j ++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k ++] = q[i ++]; <span class="comment">//4.扫尾</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k ++] = q[j ++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = l,j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<span class="comment">//5.将排序好的放回原数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整数二分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (check(mid)) r = mid; <span class="comment">// check判断是否满足</span></span><br><span class="line">       <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = r + l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浮点数二分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>; <span class="comment">// 确认精度 要求精度+2</span></span><br><span class="line">    <span class="keyword">while</span>(r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度加法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A + B    A &gt; B &gt;= 0  A 和 B 低位在前满</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="keyword">int</span> &gt; &amp;A, vector&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.size() &lt; B.size()) <span class="keyword">return</span> add(B, A);</span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.size()) t+=B[i];</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t) C.push_back(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>高精度减法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A - B A &gt;= B &gt;= 0     低位在前面</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, vector&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back(( t+<span class="number">10</span> ) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度乘低精度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size() || t; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span> ( i &lt; A.size()) t += A[i] * b;</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度除低精度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.begin(), C.end());</span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维前缀和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S[i] = a[i] + a[<span class="number">2</span>] +... +a[i];</span><br><span class="line">a[l] + ...+ a[r] = S[r] -  S[l - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>二维前缀和和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//S[i, j] = 第i行j列格子左上部分所有元素的和</span></span><br><span class="line"> <span class="comment">// (x1, y1)左上角  (x2, y2)右下角 子矩阵的和</span></span><br><span class="line">S[x2, y2] - S[x1-<span class="number">1</span>, y2] -S[x2, y1 - <span class="number">1</span>] + S[x1 - <span class="number">1</span>, y1 - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>一维差分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给区间[l, r]的每个数相加c:  初始化  在操作</span></span><br><span class="line">B[l] += c B[r + <span class="number">1</span>] -= c</span><br></pre></td></tr></table></figure><p>二维差分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (x1, y1)  左上角 (x2, y2) 右上角 子矩阵+c</span></span><br><span class="line">S[x1, y1] +=c;</span><br><span class="line">S[x2 + <span class="number">1</span>, y1] -=c;</span><br><span class="line">S[x1, y2 + <span class="number">1</span>] -=c;</span><br><span class="line">S[x2 + <span class="number">1</span>, y2 + <span class="number">1</span>] +=c;</span><br></pre></td></tr></table></figure><p>位运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的第k位数字 n &gt;&gt; k &amp; 1;</span></span><br><span class="line"><span class="comment">// 返回n的最后一位1 lowbit(n) = n &amp; -n;</span></span><br></pre></td></tr></table></figure><p>双指针算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; check(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>离散化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line">sort(alls.begin(), alls.end()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.erase(unique(alls.begin(), alls.end()), alls.end());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = alls.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区间合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    sort(segs.begin(), segs.end());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> st = -<span class="number">2e9</span>, ed = -<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (auto seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != -<span class="number">2e9</span>) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = max(ed, seg.second);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st != -<span class="number">2e9</span>) res.push_back(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;算法模板&quot;&gt;&lt;a href=&quot;#算法模板&quot; class=&quot;headerlink&quot; title=&quot;算法模板&quot;&gt;&lt;/a&gt;算法模板&lt;/h3&gt;&lt;h4 id=&quot;基础算法&quot;&gt;&lt;a href=&quot;#基础算法&quot; class=&quot;headerlink&quot; title=&quot;基础算法&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="算法" scheme="https://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>swagger</title>
    <link href="https://yoursite.com/2020/04/20/swagger/"/>
    <id>https://yoursite.com/2020/04/20/swagger/</id>
    <published>2020-04-20T11:47:18.000Z</published>
    <updated>2020-04-20T11:47:29.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>配置一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span></span>&#123;</span><br><span class="line">    <span class="comment">// 多人分组协作</span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumenetationType.SWAGGER_2)</span><br><span class="line">            .groupName(<span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 多个docket可以实现分组</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取项目环境</span></span><br><span class="line">        <span class="comment">//设置要显示的swagger环境</span></span><br><span class="line">        Profiles profiles = Profliles.of(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .groupName(<span class="string">&quot;kangkang&quot;</span>)</span><br><span class="line">            .enable(flag) <span class="comment">// 是否启动swagger</span></span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//指定要扫描的包   any 全部 none 全不扫描 withClassAnnotation 扫描方法上的注解需要注解的反射对象</span></span><br><span class="line">            .apis(RequstHandlerSelectors.basePage(<span class="string">&quot;com.lyk/controller&quot;</span>))</span><br><span class="line">            <span class="comment">//path()过滤， 过滤什么请求</span></span><br><span class="line">            <span class="comment">//.path(PathSelectors.ant(&quot;/kang&quot;))</span></span><br><span class="line">            .build;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置swagger 信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ApiInfo</span><span class="params">()</span> <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;kk&quot;</span>,<span class="string">&quot;网址&quot;</span>,<span class="string">&quot;邮箱&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">        <span class="string">&quot;swagger配置自己的文档名称&quot;</span>,</span><br><span class="line">         <span class="string">&quot;描述文档信息&quot;</span>,</span><br><span class="line">           <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;网址&quot;</span>,</span><br><span class="line">            contact,</span><br><span class="line">            <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>，</span><br><span class="line">            <span class="keyword">new</span> ArrayList()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Swagger&quot;&gt;&lt;a href=&quot;#Swagger&quot; class=&quot;headerlink&quot; title=&quot;Swagger&quot;&gt;&lt;/a&gt;Swagger&lt;/h2&gt;&lt;p&gt;配置一个配置类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springsecurity</title>
    <link href="https://yoursite.com/2020/04/20/springsecurity/"/>
    <id>https://yoursite.com/2020/04/20/springsecurity/</id>
    <published>2020-04-20T11:46:34.000Z</published>
    <updated>2020-04-20T11:46:47.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringSecurity-简单使用"><a href="#SpringSecurity-简单使用" class="headerlink" title="SpringSecurity 简单使用"></a>SpringSecurity 简单使用</h2><p>配置类信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> throw Exception</span>&#123;</span><br><span class="line">        <span class="comment">//所有人能够访问首页 功能页只能对应权限的人</span></span><br><span class="line">        <span class="comment">// 请求授权</span></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">          .antMatchers(<span class="string">&quot;/emp/**&quot;</span>).hasAnyRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/commons/**&quot;</span>).hasAnyRole(<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">        <span class="comment">//没有权限会跳转到 权限登录页面</span></span><br><span class="line">         http.formLogin();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注销功能</span></span><br><span class="line">        http.logout()</span><br><span class="line">            .deleteCookies(<span class="string">&quot;remove&quot;</span>).invalidateHttpSession(<span class="keyword">true</span>)</span><br><span class="line">            .logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenicationMangerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        anth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">           .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;admin&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">           .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder(<span class="string">&quot;admin&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>)                                         </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">                                      </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       @Autowired</span></span><br><span class="line"><span class="comment">       private DateSource dateSource;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void configure(AuthenticationManagerBuilder auth ) throws Exception&#123;</span></span><br><span class="line"><span class="comment">       auth.jdbcAuthentication()</span></span><br><span class="line"><span class="comment">       .dataSource(dataSource)</span></span><br><span class="line"><span class="comment">       .withDefaultSchema</span></span><br><span class="line"><span class="comment">       .withUser(users.username(&quot;admin&quot;)).password(&quot;admin&quot;).roles(&quot;vip1&quot;)</span></span><br><span class="line"><span class="comment">       .withUser(users.username(&quot;admin&quot;)).password(&quot;admin&quot;).roles(&quot;vip2&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录成功之后应该有用户的session</span></span><br><span class="line"></span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">             <span class="keyword">if</span>(loginUser == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限请先登录&quot;</span>);</span><br><span class="line">                 request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request,response);</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SpringSecurity-简单使用&quot;&gt;&lt;a href=&quot;#SpringSecurity-简单使用&quot; class=&quot;headerlink&quot; title=&quot;SpringSecurity 简单使用&quot;&gt;&lt;/a&gt;SpringSecurity 简单使用&lt;/h2&gt;&lt;p&gt;配置</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis_Plus</title>
    <link href="https://yoursite.com/2020/04/20/Mybatis-Plus/"/>
    <id>https://yoursite.com/2020/04/20/Mybatis-Plus/</id>
    <published>2020-04-20T11:45:39.000Z</published>
    <updated>2020-04-20T11:45:49.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="comment">###  mysql 8  的驱动  com.mysql.cj.jdbc.Driver 兼容 5</span></span><br><span class="line"><span class="comment">#    mysql 5  驱动    com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置逻辑删除</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">###设置开发环境 dev</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><h3 id="config配置类"><a href="#config配置类" class="headerlink" title="config配置类"></a>config配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransansactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.lyk.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span></span>&#123;</span><br><span class="line">    <span class="comment">//注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逻辑删除组件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IsqlInjector <span class="title">sqlInjector</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//性能分析插件</span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="meta">@Profile(&#123;&quot;div&quot;, &quot;test&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">         PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">        performanceInterceptor.setMaxTime(<span class="number">100</span>); <span class="comment">//设置sql最大时间</span></span><br><span class="line">        performanceInterceptor.setFormat(<span class="keyword">true</span>); <span class="comment">// sql格式化</span></span><br><span class="line">        <span class="keyword">return</span> performanceInterceptor ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置自动填充"><a href="#设置自动填充" class="headerlink" title="设置自动填充"></a>设置自动填充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill.....&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;modifiedTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill.....&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;modifiedTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码自动生成"><a href="#代码自动生成" class="headerlink" title="代码自动生成"></a>代码自动生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构件一个代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1 .全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPth +<span class="string">&quot;/src+main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;kangkang&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        <span class="comment">//2. 设置数据源</span></span><br><span class="line">         DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">         dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">            <span class="comment">//3设置包的配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;blog&quot;</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.lyk&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc)  ;</span><br><span class="line">          <span class="comment">//4. 策略配置</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;user&quot;</span>);<span class="comment">// 设置映射的表名字</span></span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel); <span class="comment">//下划线转驼峰命名</span></span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//自动生成lombok</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//逻辑删除</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动填充配置</span></span><br><span class="line">        TableFill gmtCreate =  <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_create&quot;</span> , FieldFill.INSERT);</span><br><span class="line">        TableFill gmtModified=  <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_modified&quot;</span> , FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmtCreate);</span><br><span class="line">        tableFills.add(gmtModified);</span><br><span class="line">        strategyConfig.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">//乐观锁</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        <span class="comment">//设置驼峰</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful 风格</span></span><br><span class="line">        strategyConfig.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">// localhost:8080/hello_id_2</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><pre><code>非空查询         //查询 name 不为空 并且邮箱不为空（wrapper 是封装复杂参数）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warppertest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询 name 不为空 并且邮箱不为空</span></span><br><span class="line">    QueryMapper&lt;User&gt; warapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper </span><br><span class="line">        .isNotNUll(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        .isNotNUll(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">        .ge(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>) <span class="comment">// get equal</span></span><br><span class="line">        userMapper.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>单个查询     查询名字等于 kk</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询名字等于kk </span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    User user = userMapper.selectOne(wrapper);<span class="comment">// 查询一个用One 多个用list 或者map</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>查询区间</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapperl</span><span class="params">()</span></span>&#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    userMapper.selectCount(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">        .notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;e&quot;</span>)</span><br><span class="line">        .likeRight(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//id 在子查询里查询出来</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>，<span class="string">&quot;select id from usr where id &lt; 3&quot;</span>);</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 升序降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//降序升序</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);<span class="comment">// 降序desc  升序ASc</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="简单crud："><a href="#简单crud：" class="headerlink" title="简单crud："></a>简单crud：</h4><p>查询所有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoWire</span></span><br><span class="line"><span class="keyword">private</span> UserMapper usermapper; <span class="comment">// 继承了BaseMapper方法来自父类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contentLoads</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//参数是一个Wrapper条件构造器， 不用就填null</span></span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">3</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;745519261@qq.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper(user);</span><br><span class="line">    System.out.println(result); <span class="comment">// 受影响的行数</span></span><br><span class="line">    System.out.println(user);<span class="comment">// 增加一个id id 是全局默认唯一id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  修改(乐观锁)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//`1 查询用户信息</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//2 修改用户信息</span></span><br><span class="line">    user.setName(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;13234&quot;</span>);</span><br><span class="line">    <span class="comment">//3. 执行</span></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乐观锁失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//线程1 </span></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//2 修改</span></span><br><span class="line">     user.setName(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;12344&quot;</span>);</span><br><span class="line">    <span class="comment">//模拟另外一个线程插队操作</span></span><br><span class="line">        User user2 =  userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">      <span class="comment">//3.执行更新</span></span><br><span class="line">        userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">        userMapper.updateById(user); <span class="comment">// 如果没有乐观锁就会覆盖插队线程的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    users.forEach(System.out.prinlnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件查询map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">   HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    <span class="comment">//多条件查询</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 参数1 当前页</span></span><br><span class="line">    <span class="comment">// 参数2 页面大小</span></span><br><span class="line">    <span class="comment">// 使用分页查询 分页简单 使用mp的Page     cur1  size5</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeletedById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userMapper.deleteBatchIds(Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过map删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类注解"><a href="#实体类注解" class="headerlink" title="实体类注解"></a>实体类注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//雪花算法 对应生成数据库中的主键</span><br><span class="line">@TableId(type = IdType.AUTO)  // 默认全局唯一Id</span><br><span class="line">private Long id;  //数据库字段要加 auto</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private Integer age;</span><br><span class="line">private String email;</span><br><span class="line">// 字段添加内容</span><br><span class="line">@TableField(fill = FieldFill.INSERT)</span><br><span class="line">private Date  createTime;</span><br><span class="line">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">private Date  modifiedTime;</span><br><span class="line">@Version  //乐观锁</span><br><span class="line">private Integer version;</span><br><span class="line">@TableLogic  // 逻辑删除</span><br><span class="line">private Integer deleted;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MybatisPlus&quot;&gt;&lt;a href=&quot;#MybatisPlus&quot; class=&quot;headerlink&quot; title=&quot;MybatisPlus&quot;&gt;&lt;/a&gt;MybatisPlus&lt;/h2&gt;&lt;h3 id=&quot;application-properties&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>elasticsearch</title>
    <link href="https://yoursite.com/2020/04/20/elasticsearch/"/>
    <id>https://yoursite.com/2020/04/20/elasticsearch/</id>
    <published>2020-04-20T11:44:37.000Z</published>
    <updated>2020-04-20T11:45:00.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES学习笔记"><a href="#ES学习笔记" class="headerlink" title="ES学习笔记"></a>ES学习笔记</h2><h3 id="Solr简介"><a href="#Solr简介" class="headerlink" title="Solr简介"></a>Solr简介</h3><ol><li>Solr可以独立运行，运行在jetty,Tomcat等一些Servlet容器中，Solr索引的实现方式：用post的方法向Solr的服务器发送一个描述File及其内容的xml文档，Solr根据xml文档添加，删除，更新索引。查询对象结果json封装。Solr是基于lucene开发企业级搜索的服务器，对外提供类似WebService的API接口。现在使用ES使用RestFul风格的API接口。都是封装了Lucene.</li><li>架构的选择： 单纯对已经有的数据Solr更快，但是建立索引时，Solr会产生io阻塞，查询性能较差，Es具有明显的优势（ElasticSerach）</li></ol><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><p>JDK1.8 ElasticSearch客户端，界面工具</p><p>Java开发， ES 和Java的包对应， JDK环境要求正常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin 启动文件</span><br><span class="line">config 配置文件</span><br><span class="line">   log4j 日志文件</span><br><span class="line">   jvm。options  java虚拟机   </span><br><span class="line">   elasticsearch.yml  默认端口9200   跨域！！！</span><br><span class="line">lib 相关jar包</span><br><span class="line">modules 功能模块</span><br><span class="line">plugins 插件! ik分词器</span><br></pre></td></tr></table></figure><p>3.启动 bin 中的.bat文件</p><p><img src="/.com//C:%5CUsers%5C74551%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200417190655557.png" alt="image-20200417190655557"></p><p>为了搜索！</p><ol start="4"><li><p>访问测试</p><p>安装可视化界面 es head的插件（相当于数据库可视化界面插件）</p><p>1.启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><ol start="2"><li><p>发现存在跨域问题： 配置es</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="3"><li><p>重启服务 再次连接</p></li><li><p>刚开始索引相当于一个数据库可以建立索引(库) ，文档(库中的数据)</p></li></ol><p>==这个head 当做数据展示工具== 后面所有的查询用Kibana </p><h3 id="安装kibanna"><a href="#安装kibanna" class="headerlink" title="安装kibanna"></a>安装kibanna</h3><ol><li><p>下载kibanna要和es版本对应 ， 好处拆箱即用、</p></li><li><p>启动 bin 中的bat   kibanna  默认端口号;  5601</p></li><li><p>开发功能(Post , curl， head, 谷歌插件测试) 可以用kibanna</p></li></ol><h3 id="ES核心"><a href="#ES核心" class="headerlink" title="ES核心"></a>ES核心</h3><p>索引， 字段(mapping)，文档(数据) </p><p>elasticsearch 面向文档  –》 建立索引（数据库）—&gt;types(表types会被弃用)–&gt;documents(行) –&gt; fields(字段)</p><p>每个索引下面包含多个类型，每个类型下面有多个文档，每个文档中包含多个字段     ==底层==： 一个索引5个分片(倒排索引) – &gt; == 多个lucene索引组成</p><p>1.物理设计</p><p>es在后台把每个索引划分成多个分片，每个分片可以在集群中的不同服务器之间迁移一个人也可以是一个集群，默认的集群名称是：elsaticsearch</p><p>2逻辑设计 </p><p>文档 相当于数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">文档： </span><br><span class="line">user </span><br><span class="line">1 zhagnsan  19</span><br><span class="line">2 kuagnshen 3</span><br><span class="line">3 kk        3</span><br><span class="line"></span><br><span class="line">类型： </span><br><span class="line">name: string text</span><br><span class="line">birth: date 类型映射 </span><br><span class="line"></span><br><span class="line">索引(数据库)：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>倒排索引： es使用的使用倒排索引的结构， 采用Lucene倒排索作为底层，这种结构能够快递的进行全文搜索。拆分出来部分，逐个对比，单个多，(score)分数高  通过内容过滤而得到id</p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>分词： 把一句话拆分成一个个关键字 如果使用中文建议采用中文分词器</p><ol><li><p>安装</p></li><li><p>可以使用elasticsearch-plugin命令查看增加进来的插件</p><p>3.查看不同的效果</p></li></ol><p>ik_smart为最少切分（不含重复）</p><p>ik_max_word 最细粒度划分（），穷尽词库的可能！字典</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中国共产党&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;国共&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;共产党&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;共产&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;党&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.自己需要的的词需要自己增加到分词器中</p><p>编写自己的的kang.dic 然后注入到xml中 ， 可以在kibanna中发现你设定的词组</p><h3 id="Rest风格说明-关于索引"><a href="#Rest风格说明-关于索引" class="headerlink" title="Rest风格说明(关于索引)"></a>Rest风格说明(关于索引)</h3><p>1.创建一个索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">put  /索引名/~类型名~/文档id</span><br><span class="line">&#123;请求体&#125;</span><br><span class="line">完成自动增加索引， 数据成功添加</span><br></pre></td></tr></table></figure><p>基本数据类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串类型： text, keyword</span><br><span class="line">数值类型 : long, integer, short, byte, double, float, half, float, scaled float</span><br><span class="line">日期类型： date </span><br><span class="line">布尔类型: boolean</span><br><span class="line">二进制类型: binary</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>指定字段类型 ==创建规则==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PUT /test2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot; : &#123;</span><br><span class="line">        &quot;type&quot; : &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot; : &#123;</span><br><span class="line">        &quot;type&quot; : &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birthday&quot; : &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过GET请求获取具体的信息</p></li><li><p>查看默认的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT /test3/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">  &quot;age&quot; : 12,</span><br><span class="line">  &quot;birth&quot; : &quot;1997-07-05&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET test3</span><br><span class="line">----------------------------</span><br><span class="line">&#123; </span><br><span class="line">  &quot;test3&quot; : &#123;</span><br><span class="line">    &quot;aliases&quot; : &#123; &#125;,</span><br><span class="line">    &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;age&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;birth&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;name&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1587134190332&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;-lcCsyVxS-iL_Ardr2u7SA&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;7060199&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;test3&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过GET _cat/indices可以获得es当前的信息(GET _cat)</p><p>5 . 修改：</p><ul><li><p>重新GET 原来的索引进行改值</p></li><li><p>通过Post  修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test3/_doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;创立者&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除索引  通过delete命令 根据请求来判断删除索引还是文档记录使用restFul风格</p></li></ol><h3 id="关于文档的基本操作-重点"><a href="#关于文档的基本操作-重点" class="headerlink" title="关于文档的基本操作(重点)"></a>关于文档的基本操作(重点)</h3><p> 1.基本操作</p><p>添加数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /kuangshen/user/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;狂神说&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span> : <span class="number">34</span>,</span><br><span class="line">  <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;一顿操作猛如虎， 一看工资2500&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span> : [<span class="string">&quot;技术宅&quot;</span>, <span class="string">&quot;温暖&quot;</span>, <span class="string">&quot;直男&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询：<code>GET kuangshen/user/1</code></p><p>更新数据： 推荐使用Post  _update  自由度更高，可以==更改期中的某一个字段==，put如果不传值==直接赋空==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST kuangshen/user/3/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot; :&#123;</span><br><span class="line">    &quot;age&quot; : 1</span><br><span class="line">  &#125;</span><br><span class="line">// 记得增加 _update 和 &quot;doc&quot; : &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>复杂操作</p><p>简单搜索： <code>GET kuangshen/user/1</code></p><p>简单条件查询： <code>GET kuangshen/user/_search?q=name:狂神说</code></p><p>   ==复杂搜索==： select (排序， 分页， 高亮， 模糊查询， 精准查询)</p><p>score 越高， 匹配度越高 </p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果 hit: 包含文档的信息， 查询结果的总数， 查询出来具体的文档， 数据可以遍历， 分数： 通过分数判断谁更匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;desc&quot;]</span><br><span class="line">&#125;                 // _source 结果过滤</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;  //通过sort 排序</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 0,       分页！！！</span><br><span class="line">  &quot;size&quot;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>布尔值查询：多条件查询 must 命令(and) 所有条件都要符合, should(or), must_not (not , 一定不是)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 3</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义过滤器:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;gt&quot;: 10  // 大于10    lt 小于  gte 大于等于 lte 小于等于</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  可以使用多条件进行过滤</span><br></pre></td></tr></table></figure><p>匹配多个条件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 技术&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; // 空格隔开</span><br><span class="line">满足期中一个条件就可以被查出来， 可以通过分值进行基本判断</span><br></pre></td></tr></table></figure><p>精确查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">term查询通过倒排索引进行精确查找</span><br><span class="line"></span><br><span class="line">关于分词： </span><br><span class="line">term 直接精确查询</span><br><span class="line"></span><br><span class="line">match 会使用分词解析（先分析文档）</span><br></pre></td></tr></table></figure><p>两个类型 text 和 keywords</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,  拆分查询</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;keyword&quot;,  当做整体狂神说Java查询不会被分词器解析</span><br><span class="line">  &quot;text&quot;:  &quot;狂神说java&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个精确查询;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET  testdb/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;t1&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;22&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;t1&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;33&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高亮查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;  搜索结果家上了em标签</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义高亮标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p class=&#x27;key&#x27; style = &#x27;color : red&#x27;&gt;&quot;,</span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;/p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配 (mysql也可以做，只是mysql效率低)</p><ul><li><p>按条件匹配</p></li><li><p>精确匹配</p></li><li><p>区间范围匹配</p></li><li><p>匹配字段过滤</p></li><li><p>多条件查询</p></li><li><p>高亮查询</p></li></ul><h3 id="集成springboot"><a href="#集成springboot" class="headerlink" title="集成springboot"></a>集成springboot</h3><p>1.找官方文档(找到es clients)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>构件对象</p></li><li><p>分析类中的方法 ==导入依赖和版本一致默认是6.xxx==需要使用7.。。。需要保持版本一致</p></li><li><p>创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建索引 Request</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建索引的请求</span></span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;kuang_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.client执行请求 createIndexResponse</span></span><br><span class="line">    CreateIndexResponse createIndexResponse =</span><br><span class="line">            restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(createIndexResponse );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Api文档</p><p>1.创建索引</p><ol start="2"><li>判断索引是否存在</li><li>删除索引</li><li>创建文档</li><li>操作文档（CRUD）</li></ol></li></ul></li></ol><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>简单爬虫~ 前后端分离~搜索高亮</p><p>爬虫：</p><ol><li>获取请求返回的页面信息，删选出我们想要的数据</li><li></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>api操作练习</p><p>需要一个Java的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">ElasticSearchClientConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLeveClient <span class="title">restHighLeveclient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLeveClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">        RestClient.build(</span><br><span class="line">        <span class="keyword">new</span> HttpHost(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)));</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// new RestHighLevelClient并且配置一下</span></span><br></pre></td></tr></table></figure><p>api测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowire</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient  client;</span><br></pre></td></tr></table></figure><p> 1 创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1 创建索引请求</span></span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;kk_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. client 创建 执行请求 crateIndexResponse</span></span><br><span class="line">    CreateIndexResponse createIndexResponse = client.indices().create(request, RequestOtion.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>判断索引是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试获取索引 只能判断索引是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line"> GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;kk_index&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = client.indices().exists(request,RequestOption.DEFUALT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeletIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;kk_index&quot;</span>);</span><br><span class="line">  AcknowledgeResponse delete = client.indices().delete(request,Request.DEFAULT);</span><br><span class="line">    System.out.println(<span class="string">&quot;delete.isAcknowledged()&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加文档</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span>&#125;</span>&#123;</span><br><span class="line">    <span class="comment">//1 创建客户端</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//2 创建请求 (如果没有索引则创建索引，有则直接用)</span></span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;kk_index&quot;</span>);</span><br><span class="line">    <span class="comment">//3 设置规则： put /kk_index/_doc/1</span></span><br><span class="line">    request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    request.timeout(TimeValue.timeVAlueSeconds(<span class="number">1</span>));</span><br><span class="line">    request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    <span class="comment">//4.数据放入请求</span></span><br><span class="line">    request.source(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">    <span class="comment">//5. 发送请求 获取响应结果</span></span><br><span class="line">    IndexResponse indexResponse = client.index(requsest,RequestOption.DEFAULT);</span><br><span class="line">     System.out.println(indexResponse.toString()); <span class="comment">// hit内容</span></span><br><span class="line">        System.out.println(indexResponse.status()); <span class="comment">// 状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>判断文档是否存在<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testIsExists</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">&quot;kk_index&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">//不获取sorce上下文</span></span><br><span class="line">    getRequst.fechSourceContent(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">    getRequest.storedFilds(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> exists = client.exist(getRequest, ReequestOption.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>获取文档信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GetRequet getRequest = <span class="keyword">new</span> GetRequest(<span class="string">&quot;kk_index&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    GetResponse getResponse = client.get(getRequest,RequestOption.DEFULT);</span><br><span class="line">    System.out.println(getResponse.getSourceAsString());</span><br><span class="line">    System.out.println(getResponse); <span class="comment">// 返回hit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>更新文档信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;kk_index&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    update.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    updateRequest.doc(JSON.toJSONString(user),XContentType.DEFALULT);</span><br><span class="line">    UpdateResponse updateResponse = client.update(updateRequest,RequestOption.DEFAULT);</span><br><span class="line">    System.out.println(updateResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除文档信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;kk_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    request.timeout(<span class="string">&quot;2s&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    DeleteResponse deleteResponse = client.delete(request,RequestOption.DEFAULT);</span><br><span class="line">    System.out.println(deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>批量查询<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">4</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">5</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">6</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">7</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">8</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;kk&quot;</span>, <span class="number">9</span>));</span><br><span class="line">    <span class="comment">//处理批量请求</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; userList.size();i++)&#123;</span><br><span class="line">        <span class="comment">//批量删除和更新 在这里修改</span></span><br><span class="line">        bulkReqeust.add(</span><br><span class="line">        <span class="keyword">new</span> IndexRequest(<span class="string">&quot;kk_index&quot;</span>)</span><br><span class="line">          .id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>)) <span class="comment">// 不填则随机分配</span></span><br><span class="line">          .source(JSON.toJSONString(userList.get(i)),XContentType.JSON)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    BulkResponse bulkResponse = client.bluk(blukRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(blukResponse.hasFailures()); <span class="comment">//是否实拍</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>特殊查询<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchRequest searchRequest  = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;kk_index&quot;</span>);</span><br><span class="line">    <span class="comment">//构造搜索条件</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchBuilder();</span><br><span class="line">    <span class="comment">//查询条件使用QueryBuilders工具类实现</span></span><br><span class="line">    TermQueryBuilder termQeuryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    <span class="comment">//MatchAllQueryBuilder matchAllQueryBuilder= QueryBuilders.matchAllQuery();</span></span><br><span class="line">     sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> TimeVule(<span class="number">60</span>,TimeUnit.SECONDS));</span><br><span class="line">    searchRequest.souce(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = client.search(searchRequest,RequestOption.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(searchResponse.getHit()))；</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">for</span>(SearchHit hit : searchResponse.getHits().getHits())&#123;</span><br><span class="line">          System.out.println(hit.getSourceAsMap());</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//爬虫工具类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Content&gt; <span class="title">parseJD</span><span class="params">(String keywords)</span></span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://search.jd.com/Search?keyword=&quot;</span>+keywords;</span><br><span class="line">        Document documetn = Jsoup.parse(<span class="keyword">new</span> URL(url),<span class="number">30000</span>);</span><br><span class="line">        Element element = document.getELementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        ArrayList&lt;Content&gt; goodsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Element el : elements)&#123;</span><br><span class="line">            String img = el.getElementByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;source-data-lazy-img&quot;</span>);</span><br><span class="line">            String price = el.getElementByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            Content content = <span class="keyword">new</span> Content(); <span class="comment">// 实体类</span></span><br><span class="line">            content.setImg(img);</span><br><span class="line">            content.setPrice(price);</span><br><span class="line">            coneten.setTitle(title);</span><br><span class="line">            goodsList.add(content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> goodsList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient resthighLevelClient;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//1. 数据解析放入索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">parseContent</span><span class="params">(String keywords)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJD(keywords);   </span><br><span class="line">    <span class="comment">//1 解析数据放入es</span></span><br><span class="line">    BulkRequest bulkRequest  = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;2m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contents.size(); i++)&#123;</span><br><span class="line">      bulkRequest.add(</span><br><span class="line">        .source(JSON.toJSONString(contents.get(i)),XContentType.JSON)</span><br><span class="line">      );     </span><br><span class="line">     &#125;</span><br><span class="line">      BulkResponse bukl  = restHighLevelClient.bulk(bulkRequest, RequestOption.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bluk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> List&lt;Map&lt;String ,Object&gt;&gt; searHighLight(String keywords, <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)&#123;</span><br><span class="line">       <span class="keyword">if</span> (pageNo &lt; <span class="number">1</span>)</span><br><span class="line">                       pageNo = <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//搜索条件</span></span><br><span class="line">       SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">       SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//分页</span></span><br><span class="line">       sourceBuilder.form(pageNo);</span><br><span class="line">       sourceBuilder.size(pageSize);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//精准匹配</span></span><br><span class="line">       TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">       sourceBuilder.query(termQueryBuilder);</span><br><span class="line">       sourceBuilder.timerout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECOND));</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//高亮</span></span><br><span class="line">       HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlitBuilder();</span><br><span class="line">       </span><br><span class="line">       highLightBuilder.field(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">       highLightBuilder.requireFiedMatch(<span class="keyword">false</span>);</span><br><span class="line">       hightlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">       hightlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">       </span><br><span class="line">       sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//执行搜索</span></span><br><span class="line">       searchRequest.source(sourceBuilder);</span><br><span class="line">       SearchResponse searchResponse = restHighLevelClient.search(searchRequest,RequestOption.DEFAULT);</span><br><span class="line">       <span class="comment">//解析结果</span></span><br><span class="line">       AarrayList&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(SearchHit hit : searchResponse.getHits().getHits())&#123;</span><br><span class="line">         Map&lt;String,HighlightField&gt; highlightFields = hit.getHighFields();</span><br><span class="line">           HighlightField title = highlightFields.get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (title)&#123;</span><br><span class="line">               Text[] fragmetns = title.fragment();</span><br><span class="line">               String newTitle = <span class="string">&quot;&quot;</span>;</span><br><span class="line">               <span class="keyword">for</span>(Text text : fragmetns)&#123;</span><br><span class="line">                newTitle += text;  </span><br><span class="line">               &#125;</span><br><span class="line">               sourceAsMap.put(<span class="string">&quot;title&quot;</span>,newTitle);</span><br><span class="line">           &#125;</span><br><span class="line">         list.add(sourceAsMap);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES学习笔记&quot;&gt;&lt;a href=&quot;#ES学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ES学习笔记&quot;&gt;&lt;/a&gt;ES学习笔记&lt;/h2&gt;&lt;h3 id=&quot;Solr简介&quot;&gt;&lt;a href=&quot;#Solr简介&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://yoursite.com/2020/04/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://yoursite.com/2020/04/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-04-07T09:20:29.000Z</published>
    <updated>2020-04-07T09:20:52.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-操作-一切皆文件，所有文件都在"><a href="#Linux-操作-一切皆文件，所有文件都在" class="headerlink" title="Linux 操作(一切皆文件，所有文件都在 /)"></a>Linux 操作(一切皆文件，所有文件都在 /)</h3><ol><li>sync 同步数据 （linux中没有输出代表成功）</li><li>shutdown -h 10/now/20:30  -r+10 关机  reboot 重启</li><li>mkdir 文件名  pwd 显示当前目录</li><li>cd 目录名（绝对路径以/, 相对路径）</li><li>删除目录  rmdir test1（只能删除空的目录） rmdir -p test1/test2/test3 递归删除了test1</li><li>cp复制文件或者目录  </li><li>chomod  777 (r : 4 w : 2 x : 1)  (属主权限 属组权限 其他用户权限)</li><li>cat 查看从第一行  tac 从最后一行   cd /etc/sysconfig  系统配置 </li><li>ifconfig 查看网络配置</li><li>nl 带行号 more 一页一页看 空格翻页 enter 下一行</li><li>硬链接 A —B 允许一个文件有多个路径，用户可以通过这种机制建立比价重要的文件放置误删</li><li>软连接： 类似window的快捷方式， 删除源文件，则软连接的另外一个文件不能使用， ln 创建硬连接   ln -s 软连接 touch 创建文件</li><li>添加用户 useradd -选项 用户名    -m 自动创建用户的主目录  -g 添加用户组 删除用户 userdel -r  用户名 可以在 /etc/passwd中查看用户 修改用户 usermod 对应内容 对应用户   usermod -d /home/233 lyk 修改完查看配置文件 </li><li>passwd -l 用户 锁定 -d 删除这个密码  都不能登录</li><li>创建一个用户组  groupadd  -g 520  -g指定id号不指定自增  groupdel 删除用户组  groupmod  修改用户组 -g -n 修改名字</li><li>磁盘操作 df -h 查看磁盘空间  du 精确某个文件的容量 du -sm</li><li>mount /dev/kuangshen/mnt/kuangshen  将外部设备挂载到mnt目录下 卸载 umount 卸载</li><li>进程管理 </li></ol><ul><li>服务后台运行， 前台都是基本程序   每一个进程都有一个父进程有一个id号码</li><li>ps  -a 当前终端运行的进程 -u 显示用户的信息进程 -x显示后台运行进程的参数</li><li>grep 查找文件中符合条件的字符串  ps -aux\grep mysql   A\B 的结果作为B的已知条件</li><li>ps -ef  查看父进程  等同于 pstree         -p显示父类id  -u显示用户组<br>19 kill -9  结束进程id<br>20 . 解压 rpm-ivh rpm包      删除  rpm –e –nodeps jdk_         检测版本 rmp -qa | grep jdk</li></ul><ol start="21"><li>查看端口： firewall-cmd –list-ports </li><li>添加端口：firewall-cmd –zone=public –add-port=9000/tcp –permanent</li><li>重启防火墙： systemctl restart firewalld.service</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Linux-操作-一切皆文件，所有文件都在&quot;&gt;&lt;a href=&quot;#Linux-操作-一切皆文件，所有文件都在&quot; class=&quot;headerlink&quot; title=&quot;Linux 操作(一切皆文件，所有文件都在 /)&quot;&gt;&lt;/a&gt;Linux 操作(一切皆文件，所有文件都</summary>
      
    
    
    
    
    <category term="linux" scheme="https://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>编译原理</title>
    <link href="https://yoursite.com/2020/04/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://yoursite.com/2020/04/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2020-04-07T09:19:31.000Z</published>
    <updated>2020-04-07T09:19:53.345Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-1什么是编译原理"><a href="#1-1什么是编译原理" class="headerlink" title="1.1什么是编译原理"></a>1.1什么是编译原理</h4><ol><li>机器语言(可以直接被计算机理解的语言 )</li><li>汇编语言(引入助记符，依赖特定的机器熟悉机器的特性)</li><li>高级语言 （源语言——&gt;编译——&gt;机器语言）</li></ol><ul><li>编译： 将高级语言翻译成汇编语言或者机器语言的过程。</li><li>源程序-&gt;编译器-&gt;汇编器-&gt;链接器/加载器-&gt;目标机器代码</li></ul><h4 id="1-2编译系统的结构"><a href="#1-2编译系统的结构" class="headerlink" title="1.2编译系统的结构"></a>1.2编译系统的结构</h4><ol><li>分析句子过程： 词法分析——&gt;语法分析-&gt;语义分析</li><li>编译器的结构： 词法分析器—&gt;语法分析器-&gt;语义分析器-&gt;中间代码生成器—&gt;机器无关代码优化器-&gt;目标代码生成器-&gt;机器相关代码优化器      <h4 id="1-3词法分析概述"><a href="#1-3词法分析概述" class="headerlink" title="1.3词法分析概述"></a>1.3词法分析概述</h4>1 .词法分析： 扫描程序的字符识别出各个单词，确定单词的类型，并且转换为–机内表示– 词法单元的形式token&lt;种别码,属性值&gt;<h4 id="1-4语法分析"><a href="#1-4语法分析" class="headerlink" title="1.4语法分析"></a>1.4语法分析</h4>1 . 语法分析器： 从词法分析器中输出的token序列中识别出各类短语，并且构造语法分析数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position = initial + rate * <span class="number">60</span>; 词法分析得到序列：&lt;id,position&gt; = &lt;id, initail&gt; &lt;+&gt; &lt;id,rate&gt; &lt;*&gt; &lt;num,<span class="number">60</span>&gt;&lt;;&gt;</span><br></pre></td></tr></table></figure></li><li>语法分析概述： <D> -&gt; <T> <IDS>;<h4 id="1-5-语义分析概述"><a href="#1-5-语义分析概述" class="headerlink" title="1.5 语义分析概述"></a>1.5 语义分析概述</h4></IDS></T></D></li><li>收集标识符的属性信息</li></ol><ul><li>种属： 简单变量符合变量，过程。。。</li><li>类型</li><li>存储位置，长度</li><li>值</li><li>作用域</li><li>参数和返回值类型</li></ul><ol start="2"><li>语义分析的主要任务</li></ol><ul><li>收集标识符的属性信息</li><li>语义检查（是否声明或者重复声明，运算类型是否匹配，操作符和操作与数是否匹配）<h4 id="1-6中间代码生成及编译器后端概述"><a href="#1-6中间代码生成及编译器后端概述" class="headerlink" title="1.6中间代码生成及编译器后端概述"></a>1.6中间代码生成及编译器后端概述</h4></li></ul><p>1.三地址码： 三地址吗是由于类似汇编语言的指令序列组成每个指令最多有3个操作数（赋值指令复制指令条件过程数组）</p><ul><li>三地址指令的四元式表示： x = y (=, y,<em>,x)    param x  (param, “</em>“,”_”,x)</li></ul><ol start="2"><li>语法结构树/语法数：</li><li>目标代码生成： 目标代码生出以源程序的中间表示形式作为输入，并且把他映射到目标语言 （目标代码生成器的一个重要任务就是为程序中使用的变量合理分配寄存器）<h4 id="2-1基本概念"><a href="#2-1基本概念" class="headerlink" title="2.1基本概念"></a>2.1基本概念</h4></li><li>字母表Σ是一个又穷符号的集合 字符表的运算</li><li>串： 字符表中的又穷序列    连接:</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-1什么是编译原理&quot;&gt;&lt;a href=&quot;#1-1什么是编译原理&quot; class=&quot;headerlink&quot; title=&quot;1.1什么是编译原理&quot;&gt;&lt;/a&gt;1.1什么是编译原理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;机器语言(可以直接被计算机理解的语言 )&lt;/li&gt;
&lt;li&gt;汇编</summary>
      
    
    
    
    
    <category term="408" scheme="https://yoursite.com/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://yoursite.com/2020/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>https://yoursite.com/2020/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2020-04-07T09:17:28.000Z</published>
    <updated>2020-04-07T09:18:44.747Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-2计算机的硬件组成"><a href="#1-2计算机的硬件组成" class="headerlink" title="1.2计算机的硬件组成"></a>1.2计算机的硬件组成</h4><ul><li>计算机体系结构：计算机体系结构是那哪些能够被程序员所见到的计算机系统的属性，即概念的结构和功能特性</li><li>计算机组成：是指如何实现计算机体系结构所体现的属性， 它包含了许多对程序员来说是透明的硬件细节。</li><li>结构： 部件之间关联的方法  功能：作为结构组成部分吧的各个独立部件的操作。</li><li>计算机的基本功能：(数据处理，数据存储，数据传输，控制) 前三种功能都需要控制，控制是由计算机的指令来施加的</li><li>计算机内部有4个功能组件： I/O, 系统总线，CPU， 存储器</li><li>CUP: 寄存器，内部总线，ALU(计算)，控制器</li><li>控制器： 终端控制，操作控制器，时序控制器<h4 id="1-3计算机的层次结构"><a href="#1-3计算机的层次结构" class="headerlink" title="1.3计算机的层次结构"></a>1.3计算机的层次结构</h4></li><li>计算机的层次结构图：应用语言机器-&gt;高级语言机器-&gt;汇编语言机器-&gt;操作系统机器-&gt;传统机器-&gt;微程序机器-&gt;硬联逻辑(第零级)</li></ul><h4 id="1-4计算机的主要技术指标"><a href="#1-4计算机的主要技术指标" class="headerlink" title="1.4计算机的主要技术指标"></a>1.4计算机的主要技术指标</h4><ul><li>机器字长： 指参与运算的基本位数，他是由加法器，寄存器的位数来决定的。(机器字长byte字节B,位b)</li><li>数据通路宽度:数据总线一次能够并行传送信息的位数，是值外部数据总线的宽度，与CPU内部数据总线宽度可以不相同。影响信息的传输能力，从而影响计算机的有效处理速度。</li><li>主存容量： 一个主存储器所能够存储的全部信息量成为主存储量，一般以字节数来表示存储容量，1024个字节成为1KB</li><li>运算速度：影响计算机的运算速度有很多指标： 吞吐量，响应时间，主频，CPU时钟周期，CPI，CPU，执行时间，MIPS,MFLOPS等</li></ul><ol><li>吞吐量： 计算机系统在单位时间内请求处理的数量</li><li>主频：时钟频率，表示在CPU内数字脉冲信号震荡的速度。</li><li>CPI：每条指令过程中间所使用的时钟周期数， IPC = 1/CPI  (cpi参数用ipc表示)</li><li>CPU执行时间： CPU执行时间= cpu时钟周期数/时钟频率 = 指令数 * CPI/时钟频率</li><li>MIPS： 每秒执行多少百万条指令， MIPS =指令数/执行时间* 10^6 = 主频 * IPC</li><li>MFLOPS: 表示每秒执行多少百万次浮点运算， MFLOPS: 浮点操作次数/执行时间* 10^6</li></ol><ul><li>例题：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.某程序在一台时钟频率为2G Hz 的计算机上A运行需要10秒，现在将一台计算机B希望运行时间缩短为6秒，计算机设计者采用的方法是提高时钟频率但是这会影响CPU的其他设计部分，使得计算机B运行程序是相当于计算机A的1.2倍时钟周期数，那么计算机的设计者应该将时钟频率提高多少？</span><br><span class="line">         解题： CPU时间a = cpu时钟周期数a / 时钟频率a</span><br><span class="line">              10 = CPU时钟周期数a / 2 * 10^9 ; -- &gt;得出CPU的时钟周期数a = 2 * 10^10</span><br><span class="line">              CPU时间b = 1.2 * CPU时间周期数a / 时钟频率b --&gt; 时钟频率b = 4G Hz</span><br><span class="line">       </span><br><span class="line">2.假设计算机A的时钟周期为250ps,对某程度的CPI为2.0；计算机B的时钟周期为500PS对同样的程序的CPI为1.2,请问哪台计算机快，快多少？</span><br><span class="line">             解题： 对于固定的程序每台执行的指令是相同的 用I表示，</span><br><span class="line">             CPU时钟周期数： A： CPU时钟周期数 = I * 2.0；(每条指令*每条指令所花费的时钟周期数)</span><br><span class="line">                             B： CPU时钟周期数 = I * 1.2；</span><br><span class="line">             CPU时间：       A: CPU时间 = CPU时间周期数 * 时钟周期 = I * 2.0 * 250px = 500 ips;  </span><br><span class="line">                             B: CPU时间 = CPU时间周期数 * 时钟周期 = I * 1.2 * 500px = 600 ips; </span><br><span class="line">            性能：   CPU性能A/ CPU性能B = 执行时间B/ 执行时间A = 1.2</span><br><span class="line">            A性能好， 好B的1.2倍</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="2-1信息表示的概述"><a href="#2-1信息表示的概述" class="headerlink" title="2.1信息表示的概述"></a>2.1信息表示的概述</h4><p>信息: 含有一定含义的数据 2类 非数值数据(字符，汉字，逻辑数据) 数值数据(定点数，浮点数)<br>数据：数据是反应客观事物属性的记录，是信息的具体表现形<br>数据则常指信息的载体，信息需要经过数字化转变成数据才能存储和传输</p><h4 id="2-2非数值数据的表示方法"><a href="#2-2非数值数据的表示方法" class="headerlink" title="2.2非数值数据的表示方法"></a>2.2非数值数据的表示方法</h4><p>非数值数据： 在计算机中用一定的规则用一组二进制编码来表示<br>字符编码： 用一定位数的二进制0 ,1来进行编码 ASCLL<br>字符串在存储器中有两种表示方法分别是： 向量法(连续的地址)和串表法(用指针链接)<br>汉子编码： GBK 字符代码化—&gt;输入码向机内码转换-&gt;机内码-&gt;机内码向字符码转换——&gt;输出<br>unicode： 编码方式（2字节）和实现方式</p><h4 id="2-3-1数值的表示方法"><a href="#2-3-1数值的表示方法" class="headerlink" title="2.3.1数值的表示方法"></a>2.3.1数值的表示方法</h4><ol><li>数据编码的最小单位是”位(bit)” 1 Byte = 8bit </li><li>无符号数： （Java中无） 没有符号位的数相当于数的绝对值</li><li>真值和机器数： 把带有正（+）和负（-）符号的数称之为真值，把符号数字化成为机器数（原码，补码，反码）</li></ol><ul><li>原码： 符号位为0表示正数，符号位为1表示负数，数值位就是真值的绝对值</li><li>反码：负数的反码是他对应的正数的原码所有位取反</li><li>正正数的原，补相同，负数的补码等于反码+1<h4 id="2-3-2-数值的表示："><a href="#2-3-2-数值的表示：" class="headerlink" title="2.3.2.数值的表示："></a>2.3.2.数值的表示：</h4></li><li>模，同余</li><li></li></ul><hr><h4 id="第四章-指令"><a href="#第四章-指令" class="headerlink" title="第四章 指令"></a>第四章 指令</h4><h4 id="机器指令特征"><a href="#机器指令特征" class="headerlink" title="机器指令特征"></a>机器指令特征</h4><p>1.指令： 计算机执行某种指令的命令<br>2.指令系统： 一台计算机所有的指令集合，他决定了一台计算机硬件的主要性能和基本功能。</p><ul><li>操作码:用指令来完成操作类型，在一套指令中需要指明从哪里得到这些源操作数</li><li>结果操作引用： 只能操作结果存放在哪里</li></ul><p>3.操作数可以存放的位置： 主存或者虚存，cup的寄存器，i/o设备<br>4. 指令的助记符表示： 操作码被缩写成助记符来表示，入ADD表示加，SUB代表减，MUL代表乘<br>5. 指令系统的设计： 设计要求：完备，有效，规整，兼容</p><ul><li>操作清单</li><li>数据类型</li><li>指令格式</li><li>寄存器： 哪些寄存器被访问</li><li>寻址方式：如何成为有效的地址</li></ul><ol start="6"><li>发展方向： 复杂指令系统(庞大的指令集)， 经典指令系统(简化指令系统，使用寄存器，单周期指令，简单寻址)<h4 id="操作数据类型"><a href="#操作数据类型" class="headerlink" title="操作数据类型"></a>操作数据类型</h4></li><li>操作的类型： 地址，字符，逻辑数据</li><li>数据传送： 寄存器与寄存器，寄存器与存储单元，存储单元与存储单元之间的数据传送</li><li>程序控制：</li><li>输入输出： <h4 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h4></li><li>指令格式的设计一般设计操作码结构，地址码结构和指令字长度三个问题</li></ol><ul><li>操作码设计： cpu执行指令呢用译码电路识别每个操作码，定长操作码：   ，扩展操作码： </li></ul><h4 id="第三章：-存储系统和结构"><a href="#第三章：-存储系统和结构" class="headerlink" title="第三章： 存储系统和结构"></a>第三章： 存储系统和结构</h4><p>1.定点数的加减运算：</p><ul><li>定点数补码加法： 任意两个数的补码之和，等于该两数的补码</li><li>定点数的补码减法： x补 - y补 = x补 + (-y)补     （-y）补 = y补 全部取反+1</li><li>补码加减法运算法则： 1.参加运算的两个操作数均用补码表示，2. 符号位作为数的一部分参加运算 3. 若做加法，直接相加，若做减法则将减数与被减数的机器负数相加 4</li></ul><ol start="2"><li>溢出和判别方法： 采用单符号，双符号，进位值 3种判别方法</li></ol><ul><li>单符号：相加时结果的符号与参数运算的操作数的符号相反有溢出，相减时结果符号和被减数符号相反，有溢出</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-2计算机的硬件组成&quot;&gt;&lt;a href=&quot;#1-2计算机的硬件组成&quot; class=&quot;headerlink&quot; title=&quot;1.2计算机的硬件组成&quot;&gt;&lt;/a&gt;1.2计算机的硬件组成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;计算机体系结构：计算机体系结构是那哪些能够被程序员所见到</summary>
      
    
    
    
    
    <category term="408" scheme="https://yoursite.com/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络知识点总结</title>
    <link href="https://yoursite.com/2020/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://yoursite.com/2020/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-07T09:14:23.000Z</published>
    <updated>2020-04-07T09:16:11.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h3><p>重点内容：</p><ul><li>计算机网络的概念</li><li>计算机网络的组成</li><li>计算机网络的功能</li><li>计算机网络的分类</li><li>计算机网络的标准化工作及相关词组</li><li>计算机网络的分层结构</li><li>计算机网络的协议,接口，服务等概念</li><li>IOS/OSI参考模型，TCP/IP模型</li></ul><hr><p>1.三网融合： 电信网络，有线电视，计算机网络<br>2.网络是把许多主机链接，完成网络信息交互，因特网是把所有网络链接在一起实现交互。<br>3.因特网标准都是以RFC的形式在internet网上发表制定阶段： 因特网草案，建议标准，草案标准，因特网标准</p><h4 id="因特网组成"><a href="#因特网组成" class="headerlink" title="因特网组成"></a>因特网组成</h4><ol><li>因特网组成</li><li>主机的链接方式</li><li>通信方式</li><li>3.1 因特网的边缘部分是因特网上的所有主机，计算机之间的通信指: 主机A的某个进程和主机B上的另一个进程进行通信。<h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4></li></ol><ul><li>网络边缘的通信方式分为两类： 客服-服务器（C-S），对等方式（P2P）<h4 id="客户-服务器模式"><a href="#客户-服务器模式" class="headerlink" title="客户-服务器模式"></a>客户-服务器模式</h4></li><li>1.通信模式： 客户和服务器和被服务的关系。客服是服务的请求放，服务器是服务的提供方。</li><li>2.通信特点：客户程序：通信时主动向服务器发起通信（知道服务器地址），不需要特殊的硬件和操作系统。服务器程序：提供专门的服务，一直被动的同时接受多个客服的服务请求(不知道对方的地址，)需要强大的硬件和操作系统。<h4 id="对等连接方-P2P"><a href="#对等连接方-P2P" class="headerlink" title="对等连接方(P2P)"></a>对等连接方(P2P)</h4></li><li>1.通信模式：两个主机都运行了对等连接软件(p2p软件),他们就可以进行平等的，对等连接通信。</li><li>2.通信特点：对等的每一个主机既是客户又是服务器<h4 id="1-3-2因特网的核心部分"><a href="#1-3-2因特网的核心部分" class="headerlink" title="1.3.2因特网的核心部分"></a>1.3.2因特网的核心部分</h4>向网络边缘中大量主机提供连通性。关键构件是路由器。提供方式：电路交换，报文交换，分组交换，</li><li>1.电路交换(打电话)必须经过””建立连接”-通话-释放资源</li><li>2.报文交换：要发送的整块数据成为一个报文。通过路由转发</li><li>3.分组交换：分组交换技术采用存储转发的方式，把资源划分为一个个更小的数据段。 ==分组交换的原理==： 在发送端，先把较长的报文划分成较短的固定长度的数据段<h4 id="分组交换特点"><a href="#分组交换特点" class="headerlink" title="分组交换特点:"></a>分组交换特点:</h4>高效 动态分配传输带宽，逐段占用通信链路，灵活，以分组为传输段位和查找路由。迅速，不必先建立连接就能向其他主机发送分组，充分使用链路的带宽，可靠，完善的网络协议，自适应性的路由选择。<h4 id="网络按作用范围分类："><a href="#网络按作用范围分类：" class="headerlink" title="网络按作用范围分类："></a>网络按作用范围分类：</h4></li><li>广域网，城域网，局域网，个人区域网 <h4 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h4></li></ul><p>1.速率<br>2.带宽  网络带宽表示在单位时间内从网络一段到另一端能通过的最高数据率<br>3.吞吐量 单位时间通过某个网络的数据量<br>4.时延</p><ul><li>发送时延</li><li>传播时延： 电磁波在信道中传播一定的距离需要花费的时间</li><li>处理时延： 主机或者路由器在收到分组时花费一定时间去处理</li><li>排队时延:分组在进入路由器后要先在输入队列中排队等待处理<br>==总时延== ： 发送时延+传播时延+处理时延+</li></ul><ol start="5"><li>时延带宽积: 时延带宽积=传播时延 * 带宽</li><li>往返时间</li><li>利用率： 1.信道利用率 2.网络利用率 d= d0/1-u (d0是空闲时候的时延，u是网络的利用率，当网络了利用率达到容器的1/2时，时延就要翻倍)<h4 id="1-7-2协议与层次划分"><a href="#1-7-2协议与层次划分" class="headerlink" title="1.7.2协议与层次划分"></a>1.7.2协议与层次划分</h4></li></ol><ul><li>我们把计算机网络的各层及其协议的集合，称为网络的体系结构</li><li>网络协议主要由3个要素组成： 1. 语法： 即数据与控制的信息的结构或格式 2. 语义： 即数据需要发出何种控制信息完成某种动作做出的何种响应 3. 同步 即书剑实现顺序<h4 id="1-7-3-具有5层的体系结构"><a href="#1-7-3-具有5层的体系结构" class="headerlink" title="1.7.3 具有5层的体系结构"></a>1.7.3 具有5层的体系结构</h4>OSI一般具有7层网络协议，tcp/ip是一个4层的体系协议，计算机网络边缘采取5层（应用层，运输层，网络层，数据链路层， 物理层）</li><li>应用层功能： 通过应用进程间的交互来完成特定的网络应用 http,smtp,ftp</li><li>运输层功能：主要负责两个主进程之间的通信提供的数据传输服务（传输控制协议，用户数据包协议）传输单位： 用户数据报</li><li>网络层功能： 网络层负责为分组交换网上的不同主机提供服务，在发送数据时，网络层吧运输层产生的报文段或者用户数据报封装成分组或者包进行传输。选择路由进行转发。</li><li>数据链路层功能： 在两个相邻结点之间传输数据时，数据链路层将网络层交下来的ip数据报进行组装，两个相邻结点间的链路上传输帧（字符串转成电信号01高低映射）</li><li>物理层： 物理层上传输单位是比特。目的端自下向上，发送端自上向下<h4 id="1-7-4-实体，协议，服务和服务访问点"><a href="#1-7-4-实体，协议，服务和服务访问点" class="headerlink" title="1.7.4 实体，协议，服务和服务访问点"></a>1.7.4 实体，协议，服务和服务访问点</h4></li><li>实体： 表示任何可发送或者接受信息的硬件或者软件进程</li><li>协议： 控制两个实体进行通信的规范的集合</li><li>在协议的控制下，两个对等的实体间通信使得本层能够向上一层提供服务。</li><li>实现本层协议，还需要使用下层所提供的服务、</li></ul><hr><h3 id="第一章-物理层"><a href="#第一章-物理层" class="headerlink" title="第一章 物理层"></a>第一章 物理层</h3><p>重点内容： </p><ul><li>通信基础：<ol><li>信道，信号，带宽，码元，波特，速率，信源与信宿基本概念</li><li>奈奎斯特定理与香农定理</li><li>编码与调制</li><li>数据报与虚电路</li></ol></li><li>传输介质<ol><li>双绞线，同轴</li><li>物理层接口的特性</li></ol></li><li>物理层设备<ol><li>中继器</li><li>集线器<h4 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h4>物理层主要任务是描述为确定与传输媒体接口的一些特性</li></ol></li><li>机械特性– 指明接口所用接线器的形状和尺寸，引线数目和排列，固定的锁定装置等等。</li><li>电气特性– 指明在接口电缆的各线条上出现的电压范围</li><li>功能特性– 指明某条线上出现某一种电压所表示的意义</li><li>规程特性– 指明对于不同功能的各种<h4 id="2-2-数据通信的基本知识"><a href="#2-2-数据通信的基本知识" class="headerlink" title="2.2 数据通信的基本知识"></a>2.2 数据通信的基本知识</h4>一个数据通信系统可以划分为三个部分，源系统（发送端），传输系统（传输网络）,目的系统(接受端)</li><li>源点： 源点设备产生要传输的数据 pc产生的数字比特流源点又称为源站或者信源</li><li>发送器 源点产生的比特流要通过发送器进行编码后才能在传输系统中传输。典型的发送器就是调节器</li><li>接收器： 接受传输过来的信号，并且把他转化成能够被目的设备处理的信息典型的接收器就是解调器</li><li>终点：终点设备从接收器中获取传来的数字比特流然后把信息输出<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4>数据 – 运输的实体 ， 信号 – 数据的电气或者电磁实现<br>‘模拟的’ – 连续变化的   ‘数字的’– 取值离散的<br>调制 – 把数字信号转换为模拟信号  解调 – 把模拟信号转化为数字信号<h4 id="2-2-2-有关信道的基本概念"><a href="#2-2-2-有关信道的基本概念" class="headerlink" title="2.2.2 有关信道的基本概念"></a>2.2.2 有关信道的基本概念</h4></li><li>单向通信 – 只有一个方向的通信而没有反方向的交互</li><li>双向交替通信– 通信双方都可以发消息但是不能同时发消息</li><li>双向同时通信 – 通信双方可以同时发送和接受消息</li><li>基带信号就是将数字信号1或0直接用两种不同的电压来表示，然后送到线路上去传输</li><li>宽带信号则是将基带信号进行调制后形成的频分复用模拟信号</li><li>调制： 来自信源的信号常称为基带信号，</li></ul><ol><li>==基带调制==：调制分为两大类一类是对基带信号进行转化（查分曼彻斯特编码：在每一位的中心处使用都有跳变，位开始边界有跳变代表0，而位开始边界没有跳变代表1）</li></ol><ul><li>基带调制方式： 不归零制： 正电代表1负点代表0.归零制：正脉冲代表1，负脉冲代表0，曼彻斯特编码：位于周期中心向上跳变化的是0，位周期中心的向下跳变代表1，但是也可以反过来定义</li></ul><ol start="2"><li>带通调制： 另一类调制则需要使用==载波进行调制==，把基带信号的频率范围搬移到较高的频段，并转化为模拟信号，这样能够更好地在模拟信号中传输</li></ol><ul><li>带通调制方式： 调幅（AM） 调频（FM） 调相(PM) </li></ul><ol start="3"><li>码元传输率</li></ol><ul><li>任何实际的信道都是不理想(失帧  带宽，噪音，距离)，码元传输的速率越高，信号传输的距离越远，信道的输出端波形失帧越严重<h4 id="2-2-3-信道的极限容量"><a href="#2-2-3-信道的极限容量" class="headerlink" title="2.2.3 信道的极限容量"></a>2.2.3 信道的极限容量</h4></li></ul><ol><li>信噪比：  10log^10 (S/N) </li><li>香农公式： C = w log2 (1 + S/N)   b/s   W:带宽  S/N 信噪比   极限！！！<h4 id="2-3物理层下的传输媒体"><a href="#2-3物理层下的传输媒体" class="headerlink" title="2.3物理层下的传输媒体"></a>2.3物理层下的传输媒体</h4></li><li>传输媒体 ： 发送器和接受器之间的物理通路. 分为2类 ： 引导性传输媒体和非引导性传输媒体</li></ol><ul><li>引导性传输媒体： 双绞线， 同轴电缆，光缆：  </li><li>非引导性： 1. 短波通信 2. 微波通信</li></ul><ol start="2"><li>信道复用技术： </li></ol><ul><li>频分复用： 同样的时间占用不用的带宽资源</li><li>时分复用（常用）：  不同的时间占用相同的频带宽度 （部分用户某时间不用  产生浪费）</li><li>统计时分复用：  不固定分配间隙，动态分配间隙不过每个间隙必须含有用户地址信息，会造成不必要开销</li><li>波分复用： 光的频分复用</li><li>码分复用： 每一个比特时间划分为m个短的时间间隔，称为码片</li></ul><p>3.码片序列： 每个站被指派唯一的一个Mbit的码片序序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S 站的 8 bit码片序列是 00011011 发送比特1时 就发送00011011 发送比特0时就发送11100100（反码）用-1表示 0</span><br><span class="line">S站的码片序列为 （-1，-1，-1，+1，+1，-1，+1, +1）</span><br></pre></td></tr></table></figure><ul><li>码片的序列特性： 每个站互相正相交得0，内积（相乘相加）1/—-1</li></ul><p>4.数字传输系统： 同步光纤网</p><h4 id="2-6宽带接入技术（有线）"><a href="#2-6宽带接入技术（有线）" class="headerlink" title="2.6宽带接入技术（有线）"></a>2.6宽带接入技术（有线）</h4><ol><li>ADSL技术： 0~4kHz 低波段打电话，高波段上网  （电话线） </li></ol><ul><li>调制解调器</li></ul><ol start="2"><li>光纤同轴混合网（HFC网） （电视线）</li></ol><ul><li>打电话，上网</li></ul><ol start="3"><li>FTTx技术    （光）</li></ol><hr><h2 id="第二章数据链路层"><a href="#第二章数据链路层" class="headerlink" title="第二章数据链路层"></a>第二章数据链路层</h2><p>重点内容： 1.数据链路层的功能，2组帧，3，差错控制， 4，检错编码， 5，纠错编码 6，流量控制和可靠的传输机制</p><ul><li>互联网边缘部分： 应用层，传输层，网络层，链路层，物理层   核心部分： 网络层， 链路层， 物理层</li></ul><h4 id="3-1-1使用点对点信道的数据链路层："><a href="#3-1-1使用点对点信道的数据链路层：" class="headerlink" title="3.1.1使用点对点信道的数据链路层："></a>3.1.1使用点对点信道的数据链路层：</h4><ul><li>链路： 一条无源的点到点的物理线路短，期中没有任何的交换结点</li><li>数据链路：增加协议的硬件加在链路上就是数据链路  (数据 – 》 帧)</li></ul><ol><li>封装成帧 : 前后端分别增加首部和尾部（控制信息）</li><li>帧： 是数据链路层的数据传输单元。最大传输单元MTU SOH(首部) EOT(尾部) ESC(转义字符)</li><li>透明传输： 无论什么样的数组组合都能够通过这个数据链路层进行传输</li><li>差错检测： 传输错误的比特占传输比特总数的比率称为误码率(BER) 数据链路采用了冗余检测(CRC)</li></ol><ul><li>冗余检测CRC： 把收到的每一个帧都以同样的除数P（模二运算） 然后检查得到余数R, R=0,accept 余数不为0就为出错(从发送端到接受端)， 无差错接受</li><li>FCS： 在数据后面增加冗余码（可以用CRC得出）</li></ul><ol start="5"><li>流量控制： 主机A像主机B传输数据的信道仍然是无差错的理想信道。（流量带宽收取方控制，前后带宽太大造成帧丢失）</li></ol><ul><li>确认机制： 接受端发送返回信号（数据链路层中有接受缓存进行排队），</li><li>超时计时器： 在帧丢失的情况下，超时重新发送帧</li><li>解决重复帧： 给帧带上不同的发射序号（区分上下帧即可）<h4 id="3-2-点对点协议PPP（p2p）"><a href="#3-2-点对点协议PPP（p2p）" class="headerlink" title="3.2 点对点协议PPP（p2p）"></a>3.2 点对点协议PPP（p2p）</h4></li></ul><ol><li>pp协议是用户计算机和ISP进行通信时所使用的数据链路层协议</li></ol><ul><li>PPP协议的特点： 1.简单 2. 封装成帧(使用特定字符作为帧的开始和结束) 3.透明性 4.多种网络层协议(支持ip，ipx，弥补上一层的影响，为上层网络层提供服务) 5.多种链路上运行 6.差错检测 7.检测链接状态 8.最大传输单元（帧的传输） 9.网络层地址协商(网卡 mac地址) 10.数据压缩</li></ul><ol start="2"><li>p2p协议饿组成： 1. 将Ip数据报封装到串行链路的方法 2. 一个用来建立配置和测试数据的链路控制协议(LCP) 3.一套网络控制协议(NCP)</li><li>帧格式：标准字段F仍为0X7E(eot,soh)，控制字段,ppp有一个2字节的协议字段(ox0021)ip数据报，(0xc021)控制数据，(0x8021),表示这是网路控制数据报</li><li>字符填充问题：ppp同步传输链路是采用硬件完成比特填充，异步传输时，用一种特殊的字符填充方法。</li></ol><ul><li>零比特填充： 发现连续5个1立即填充一个0(防止某个组合恰好是结束(7个1)或者其他字符)，使用同步传输（一串）不适用异步（逐个）采用零比特填充实现透明传输</li></ul><ol start="5"><li>ppp工作状态<h4 id="3-3-使用广播信道的数据链路协议"><a href="#3-3-使用广播信道的数据链路协议" class="headerlink" title="3.3 使用广播信道的数据链路协议"></a>3.3 使用广播信道的数据链路协议</h4></li><li>局域网的数据链路层：具有广播的功能2.便于系统扩展和演变3，提高系统的可靠新实用性生存性。<h4 id="媒体共享技术"><a href="#媒体共享技术" class="headerlink" title="媒体共享技术"></a>媒体共享技术</h4></li><li>静态划分信道（物理层）</li><li>动态媒体接入控制（数据链路层）</li></ol><ul><li>随机接入， 受控接入</li></ul><ol start="3"><li>数据链路的两个子层</li></ol><ul><li>逻辑链路控制LLC 媒体接入控制：MAC </li></ul><ol start="4"><li>适配器的作用： 网络接口板又称为通信适配器或者网络接口卡NIC</li></ol><ul><li>网的重要作用： 进行串行/并行转换，对数据进行缓存，在操作系统中安装设备驱动，实现以太网协议‘</li></ul><ol start="5"><li>广播发送方式： 较为灵活的无连接的工作方式，对数据的帧不要求编号不要求确认。局域网差错的概率小</li><li>载波监听多点接入/碰撞检测CSMA/CD<ul><li>多点接入表示许多计算机在多点接入的方式在一根总线上  ，载波监听，检测总线上有没有其他信号</li><li>使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）。</li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性</li></ul></li><li>检测碰撞： <h5 id="3-4-1-传统以太网"><a href="#3-4-1-传统以太网" class="headerlink" title="3.4.1 传统以太网"></a>3.4.1 传统以太网</h5></li><li>mac层的连接方式： 传输媒体： 铜缆，铜线，光缆</li><li>检测技术：</li><li>争用期：最先发送的数据帧的站，在发送端发送数据帧后之多经过2a的时间可以检测出是否发生碰撞(2倍端到端往返时延)</li><li>二进制避让算法</li><li>集线器：使用电子器件来模拟实际电缆的工作</li><li>以太网的实际利用率：广播信道典型问题： 碰撞<h4 id="3-5在物理层扩展以太网"><a href="#3-5在物理层扩展以太网" class="headerlink" title="3.5在物理层扩展以太网"></a>3.5在物理层扩展以太网</h4></li><li>通过多个集线器形成小的以太网，多个以太网通过主干集线器进行通信</li><li>用集线器扩展以太网（集线器工作在物理层）：</li></ol><ul><li>优点：能够进行跨碰撞域通信，扩大了局域网覆盖的地理范围</li><li><ul><li>缺点：不同的碰撞域使用不同的数据就不能用集线器链接起来</li></ul></li></ul><ol start="3"><li>网桥（工作在数据链路层）：扩展局域网，根据mac帧的目的地址对收到的帧进行转发。<ul><li>转发， 过滤帧检查地址 </li></ul></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h3 id=&quot;第一章-计算机网络概述&quot;&gt;&lt;a href=&quot;#第一章-计算机网络概述&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="408" scheme="https://yoursite.com/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>springmvc</title>
    <link href="https://yoursite.com/2020/01/23/springmvc/"/>
    <id>https://yoursite.com/2020/01/23/springmvc/</id>
    <published>2020-01-22T17:20:12.000Z</published>
    <updated>2020-01-22T17:21:03.089Z</updated>
    
    <content type="html"><![CDATA[<h4 id="springmvc-字符串转换Date时间格式"><a href="#springmvc-字符串转换Date时间格式" class="headerlink" title="springmvc 字符串转换Date时间格式"></a>springmvc 字符串转换Date时间格式</h4><p>在utils中设计一个类，实现Converter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span> ,<span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//实现接口方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (source == <span class="keyword">null</span>)&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请您传入数据&quot;</span>)；</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-mm-dd&quot;</span>);</span><br><span class="line"> <span class="comment">//把字符串转换成日期 </span></span><br><span class="line"> <span class="keyword">return</span> df.parse(source);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在springmvc-config中配置自义定类型转换器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;类的路径  StringToDateConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//最后在开启springmvc注解支持中加入conversion-service</span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driver</span> <span class="attr">convertion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="restFule-风格"><a href="#restFule-风格" class="headerlink" title="restFule 风格"></a>restFule 风格</h5><ul><li>请求路径相同(url地址)，但是请求方式不同(post, get)，若两个方法请求方式也相同则传参数 /user/{id}  findByid(id)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testPathVariable/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(<span class="meta">@PathVariable(name=&quot;id&quot;)</span>String id)</span></span>&#123;</span><br><span class="line"><span class="comment">// @PathVariable 就是获取url地址的&#123;id&#125;的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul><li>RequestParam 前段参数与后端参数不一致时候，使用@RequestParam(前段的参数名) 相当于定义别名写死（name属性），</li><li>RequestBody get请求方式不适用，在传参时不要写具体的参数采用@RequestBody 封装整个响应体</li><li>PathVariable 用于绑定url的占位符</li><li>RequestHeader 获取请求头消息</li><li>CookieValue 指定cookie名称的值传入控制器方法参数(在形参的时候用这个注解里面含有value属性等于名称，然后拿值)</li><li>ModelAtrribute(方法和参数都可用) 方法上：优先执行这个方法 参数上：在map集合中取出来对象赋值给参数(就是参数不完全包含字段，可以设置一个方法先执行查询出没有字段的元素赋给对象，在利用注解取出赋给参数对象)</li><li>SessionAttribute 多次执行控制器方法的参数共享（model防止过多使用servelet API耦合过多，想model里面存数据就是存放在Request域中存放类型map） 可以多次请求 SessionAttributes注解在类上（value=”key”）存放数据在session域中可以用el表达式中查看 可以在session域中取值封装到modelMap中</li></ul><h4 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h4><ul><li>String类型 返回在springmvc.xml里面配置的目录下面的的jsp文件</li><li>void类型 如果不写返回值默认请求目录下(请求路径.jsp文件) 可以自己编写请求转发（不会帮你调用视图解析器，得自己写全web-inf/success.jsp）  请求转发一次请求，不用编写项目名字，重定向两次请求，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testVoid&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> throw Exception</span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;testVoid执行&quot;</span>)；</span><br><span class="line">   <span class="comment">//请求转发 可以进web-inf</span></span><br><span class="line">   request.getRequestDispatcher(<span class="string">&quot;WEB-INF/success.jsp&quot;</span>).forward(request,response);</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   重定向 = 发送一个新的请求不能直接进web-inf里面的目录</span></span><br><span class="line"><span class="comment">   response.sendRedirect(request.getContextPath()+&quot;/index.jsp&quot;);</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   或者直接响应</span></span><br><span class="line"><span class="comment">   设置中文乱码</span></span><br><span class="line"><span class="comment">   respon.setCharacterEncoding(&quot;UTF-8&quot;)；</span></span><br><span class="line"><span class="comment">   respon.setContentType(&quot;text/html;charset=UTF=8&quot;);</span></span><br><span class="line"><span class="comment">   response.getWriter().print(&quot;你好&quot;);</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ModelAndView类型 ModelAndView对象是Spring提供的一个对象，可以用来调整具体的Jsp视图</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ModelAndView对象</span></span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">&quot;妹妹&quot;</span>);</span><br><span class="line">user.setPassWord(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">user.setAge(<span class="string">&quot;20&quot;</span>);</span><br><span class="line"><span class="comment">//把user对象存储到mv对象中，也会把user对象存入到request对象</span></span><br><span class="line">mv.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"><span class="comment">//跳转到那个页面  使用了视图解析器（web-inf）</span></span><br><span class="line">mv.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用forward转发，Redirect重定向方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForwardOrRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.print(<span class="string">&quot;323&quot;</span>);</span><br><span class="line">  <span class="comment">//请求的转发</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/pages/success.jsp&quot;</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  重定向 不使用视图解析器 一般要加项目名称</span></span><br><span class="line"><span class="comment">  return &quot;redirect:/index.jsp&quot;；</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应json数据的请求 ResponseBody</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;springmvc-字符串转换Date时间格式&quot;&gt;&lt;a href=&quot;#springmvc-字符串转换Date时间格式&quot; class=&quot;headerlink&quot; title=&quot;springmvc 字符串转换Date时间格式&quot;&gt;&lt;/a&gt;springmvc 字符串转换Da</summary>
      
    
    
    
    
    <category term="ssm" scheme="https://yoursite.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>ssm整合配置</title>
    <link href="https://yoursite.com/2020/01/21/ssm%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE/"/>
    <id>https://yoursite.com/2020/01/21/ssm%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-21T15:57:25.000Z</published>
    <updated>2020-01-22T04:21:08.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整合ssm"><a href="#整合ssm" class="headerlink" title="整合ssm"></a>整合ssm</h3><h6 id="数据库连接c3p0-properties"><a href="#数据库连接c3p0-properties" class="headerlink" title="数据库连接c3p0.properties"></a>数据库连接c3p0.properties</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###### database-conf configuration information ######</span></span><br><span class="line"><span class="meta">c3p0.jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/ssm1?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="meta">c3p0.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">c3p0.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">c3p0.password</span>=<span class="string">admin</span></span><br><span class="line"><span class="comment">###### C3P0 configuration information ######</span></span><br><span class="line"><span class="meta">c3p0.maxPoolSize</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">c3p0.minPoolSize</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">c3p0.initialPoolSize</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">c3p0.maxIdleTime</span>=<span class="string">1800</span></span><br><span class="line"><span class="comment">#.cj.</span></span><br></pre></td></tr></table></figure><h6 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>yubuntu0109.github.io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_crud_alumni<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssm_crud_alumni Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.spring.webmvc.version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">project.build.spring.webmvc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.spring.webmvc.json.version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">project.build.spring.webmvc.json.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.spring.jdbc.version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">project.build.spring.jdbc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.mybaits.version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">project.build.mybaits.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.myabtis.pagehelper.version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">project.build.myabtis.pagehelper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.mybatis.spring.version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">project.build.mybatis.spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.jstl.version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">project.build.jstl.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.mysql.jdbc.version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">project.build.mysql.jdbc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.mysql.c3p0.version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">project.build.mysql.c3p0.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.logging.version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">project.build.logging.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring mvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.spring.webmvc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring mvc:JSON --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.spring.webmvc.json.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring JDBC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.spring.jdbc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.mybaits.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis 分页插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.myabtis.pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis与Spring的整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.mybatis.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.jstl.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.mysql.jdbc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.mysql.c3p0.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.logging.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm_crud2<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBatis核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 别名定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;实体包路径&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- FriendMapper接口映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;映射到接口文件&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="spring-config之applicationContext-xml"><a href="#spring-config之applicationContext-xml" class="headerlink" title="spring-config之applicationContext.xml"></a>spring-config之applicationContext.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring configuration file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取c3p0.properties中的数据库配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database-conf/c3p0.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库的url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.jdbcUrl&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库的用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库的密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.initialPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.maxPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.minPoolSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接的生存时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;c3p0.maxIdleTime&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 原理:控制数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启事务注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis与Spring整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Mapper映射文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/FriendMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MyBatis核心配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:/mybatis-conf/mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- MyBaits分页插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 指定数据库类型 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>helperDialct=mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启Mapper接口扫描器: 扫描Dao层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pers.huangyuhui.ssm.crud.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启Spring IOC注解扫描器: 扫描Servie层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;pers.huangyuhui.ssm.crud.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="spring-config之springmvc-config-xml"><a href="#spring-config之springmvc-config-xml" class="headerlink" title="spring-config之springmvc-config.xml"></a>spring-config之springmvc-config.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring-MVC configuration file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用注解扫描器: 扫描被@Controller注解的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;pers.huangyuhui.ssm.crud.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器(unused) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is my first simple project about SSM<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动Spring: 加载Spring核心配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意: 使用classpath:path(防止异常:FileNotFoundException) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-conf/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring MVC编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动Spring: 配置加载Spring文件的监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动Spring MVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置Spring MVC的前端核心控制器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring_mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载Spring MVC配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-conf/springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 服务器启动后立即加载Spring MVC配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring_mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定系统主页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1 .database-config 配置c3p0数据库文件<br>2 .mybatis-config 配置Mapper接口文件<br>3.spring-config配置(spring,springmvc)</p><ul><li>applicationContext.xml :</li><li>1.读取c3p0.properties中数据库的配置信息，&lt;context:property-placeholder location=””&gt;</li><li>2.配置数据源dataSource</li><li>3.配置spring事务管理器 transactionManager</li><li>4.开启事务的注解扫描&lt;tx:annotation-driven transaction-manage=”transactionManager”&gt;</li><li>5.Mybatis与spring的h整合 class = sqlSessionFactoryBean (1.注入数据源，2.指定Mapper映射文件位置，3.指定Mybati核心配置文件的位置)</li><li>6.开启Mapper接口扫描器扫描dao层</li><li>7.开启springioc扫描器 扫描service层</li><li>springmvc-config.xml:</li><li>1 .启动注解扫描器扫描Controller &lt;context:component-scan base-package=””&gt;</li><li>2.加载注解驱动 <a href="mvc:annotation-driver/">mvc:annotation-driver/</a></li><li>3.处理静态资源<a href="mvc:default-servlet-handler/">mvc:default-servlet-handler/</a></li><li>4.配置视图解析器 InternaiResourceViewResolver</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;整合ssm&quot;&gt;&lt;a href=&quot;#整合ssm&quot; class=&quot;headerlink&quot; title=&quot;整合ssm&quot;&gt;&lt;/a&gt;整合ssm&lt;/h3&gt;&lt;h6 id=&quot;数据库连接c3p0-properties&quot;&gt;&lt;a href=&quot;#数据库连接c3p0-properties&quot;</summary>
      
    
    
    
    
    <category term="ssm" scheme="https://yoursite.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://yoursite.com/2020/01/21/Redis/"/>
    <id>https://yoursite.com/2020/01/21/Redis/</id>
    <published>2020-01-21T08:41:36.000Z</published>
    <updated>2020-01-21T08:42:09.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h3 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h3><ul><li>redis-server.exe –server-start</li><li>redis-server.exe –server-stop</li><li>redis-cli.exe -h 127.0.0.1 -p 6279</li><li>del key 删除key</li><li>dump key 序列化给定key 返回被序列化的值</li><li>exists key 检查key是否存在</li><li>expire key seconds 为给定的key设置过期的时间</li><li>pexpire key millseconds 设置key的过期时间以毫秒计算</li><li>ttl key 以秒做单位</li><li>Redis有0~15个数据库</li><li>？为占位符 * 通配符，命名要有意义</li><li>select 0 ~ 15 访问数据库</li><li>rename 修改key名称</li><li>move   当前的key移动到给定的数据库的当中</li><li>type key Redis支持5种数据类型，String，hash，list，set，zset(有序集合)</li><li>set info:msg 活动限时3小时</li><li>get info:msg</li><li>expire key seconds 限时优惠活动，网站数据缓存，手机验证码，限制网站访问评率</li><li>key命名： redis 单个key存入512M 大小 1. key不要太长，尽量不要超过1024字节，这样不仅消耗内存而且降低查找效率， 2.key也不要太短，太短的话可读性降低3.在一个项目中，key最好使用统一的命名模式，例如 user:123:password</li><li>String类型是二进制类型，是二进制安全，可以传输不同类型，解码和编码都是用使用二进制</li><li>setnx 给不存在的key赋值 </li><li>getrange  keys start end</li><li>getset q先将旧值取出然后赋新值</li><li>incr key 自增 decr key 自减  incr key by number 自增自定义 decr by key 自减</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h3&gt;&lt;h3 id=&quot;redis命令&quot;&gt;&lt;a href=&quot;#redis命令&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>java_web</title>
    <link href="https://yoursite.com/2020/01/19/java-web/"/>
    <id>https://yoursite.com/2020/01/19/java-web/</id>
    <published>2020-01-19T06:32:26.000Z</published>
    <updated>2020-01-19T06:34:31.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-web"><a href="#Java-web" class="headerlink" title="Java web"></a>Java web</h3><p>1.常见状态码：</p><ul><li>200： 一切正常</li><li>300/301： 页面重定向</li><li>404： 资源不存在</li><li>403：权限不足</li><li>500： 服务器内部错误（代码写错）</li><li>其他编码：积累</li></ul><p>2 . jsp在html中嵌套Java代码（&lt;% 代码 %&gt;）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在web.xml中 &lt;welcome-flie&gt; index.jsp&lt;welcom-file&gt;首页自动找这个页面</span><br></pre></td></tr></table></figure><p>3 . 虚拟路径，一般在web-app目录下，修改路径方法：更改conf/server.xml里面的host路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Coontext docBase=&#x27;&#x27; path=&#x27;&#x27;&gt; docBase实际路径 path相对路径</span><br></pre></td></tr></table></figure><p>4 . 虚拟主机</p><ul><li>在conf/server.xml中间配置<host appbase="webapp" naem="www.test.com"> 修改<Context> 然后在修改默认引擎，在本机中添加映射 /etc/host<br>5 .index.jsp就在webapp的目录下面，但是web-INF中的文件 无法通过浏览器客户端直接访问，只能通过转发访问，并不是任何内部跳转都能访问web-inf 原因是 跳转有2种方式： 请求转发 和 重定向</Context></host></li></ul><p>6.需要配置一个tomcat运行环境如果xml文件报错，增加servlet-api的jar包<br>7 .统一字符集编码</p><ul><li>编码分类： 设置jsp文件编码（jsp文件中的pageEncoding属性）， 设置浏览器阅读jsp文件的编码(jsp文件的content属性) 一般都设置成UTF-8 文本编码<br>8 . JSP的页面元素：</li><li>脚本scriptlet    1,&lt;%  %&gt;局部变量，Java代码  2.&lt;%! %&gt;全局变量定义方法 3.&lt;%=  %&gt;打印代码</li><li>修改web.xml 修改Java代码，需要重启Tomcat服务器，其他则不需要</li><li>指令： page指令&lt;%@ page …. %&gt; page 指定的属性； language：jsp使用的脚本语言，import导入类， pageEncoding: jsp自身编码， contentType 浏览器解析jsp的编码（保持一致就可以了）</li></ul><ol start="9"><li>jsp的九大内置对象（自带不需要new)</li></ol><ul><li>out : 输出对象，向客户端输出</li><li>pageContext</li><li>request : 请求对象，存储客户端向服务端请求信息  request常见方法：String getParameter(String name): 根据请求的字段名（key）返回值（vale）  String[] getParameterValues(String name）返回多个字段值（checkbox） void  setCharacterEncoding(‘编码格式’)(默认Tomcat的编码格式) getRequstDispatcher(‘b.jsp’).forward(request, response): 请求转发 的方式跳转页面 A -&gt; B  getServerletContext()获取项目的servletContext对象 </li><li>response</li><li>session</li><li>application</li><li>config</li><li>page</li><li>exploding</li></ul><p>10 . get 和 post请求方式的区别： </p><ul><li>地址栏提交方式 和 method =”get”方式都属于get请求方式,地址栏上显示请求信息(但是不会显示全部,会产生容纳不下报错)，post请求不显示例如文件上传用post,一般推荐用post</li></ul><p>11 .response 响应信息</p><ul><li>提供的方法：void  addCookie(Cookie cookie);服务端向客服端增加cookie对象</li><li>void sendRedirect(String location) throws IOException:页面跳转的一种方式（重定向）</li><li>void setContent(String type):设置服务端的contenttype类型</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java-web&quot;&gt;&lt;a href=&quot;#Java-web&quot; class=&quot;headerlink&quot; title=&quot;Java web&quot;&gt;&lt;/a&gt;Java web&lt;/h3&gt;&lt;p&gt;1.常见状态码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200： 一切正常&lt;/li&gt;
&lt;li&gt;300/3</summary>
      
    
    
    
    
    <category term="web" scheme="https://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://yoursite.com/2019/12/25/%E5%BF%83%E6%83%85/"/>
    <id>https://yoursite.com/2019/12/25/%E5%BF%83%E6%83%85/</id>
    <published>2019-12-25T13:54:33.364Z</published>
    <updated>2020-04-07T09:35:33.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LOG"><a href="#LOG" class="headerlink" title=".LOG"></a>.LOG</h2><p>title: 心情<br>date: 2019-12-25 21:54:33<br>tags:</p><hr><p>为什么脆弱时候想你更多</p><p>加油努力啦，有方向有目标！！！加油！  <img src="/.com//D:%5C%E5%8D%9A%E5%AE%A2%5Chexo%5Csource_posts%5C%E5%BF%83%E6%83%85%5Cimage-20200407172345948.png" alt="image-20200407172345948"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LOG&quot;&gt;&lt;a href=&quot;#LOG&quot; class=&quot;headerlink&quot; title=&quot;.LOG&quot;&gt;&lt;/a&gt;.LOG&lt;/h2&gt;&lt;p&gt;title: 心情&lt;br&gt;date: 2019-12-25 21:54:33&lt;br&gt;tags:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;为什么脆</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javase基础</title>
    <link href="https://yoursite.com/2019/12/23/javase%E5%9F%BA%E7%A1%80/"/>
    <id>https://yoursite.com/2019/12/23/javase%E5%9F%BA%E7%A1%80/</id>
    <published>2019-12-23T13:28:08.000Z</published>
    <updated>2020-01-19T06:34:49.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础知识点"><a href="#Java基础知识点" class="headerlink" title="Java基础知识点"></a>Java基础知识点</h1><h4 id="1-JDK-和-JRE有什么区别？"><a href="#1-JDK-和-JRE有什么区别？" class="headerlink" title="1.JDK 和 JRE有什么区别？"></a>1.JDK 和 JRE有什么区别？</h4><ul><li>JDK： Java Development Kit 的简称， Java 开发工具包， 提供Java的开发环境 和运行环境。</li><li>JRE： Java Runtime Environment的简称， Java 的运行环境，为Java提供了运行所需要的环境。</li></ul><p>具体来说JDK其实包含了JRE， 同时还包含了编译Java源码的编译器javac,还包含很多Java程序调试和分析的工具，简单来讲你需要运行Java程序，只需要安装jre就可以了，如果你需要编写Java程序，需要安装jdk。</p><h4 id="2-和equals的区别是什么？"><a href="#2-和equals的区别是什么？" class="headerlink" title="2. == 和equals的区别是什么？"></a>2. == 和equals的区别是什么？</h4><h5 id="解读"><a href="#解读" class="headerlink" title="==解读"></a>==解读</h5><p>对于基本类型和引用类型==的作用是不相同的</p><ul><li>基本类型：比较的是值是否形同；</li><li>引用类型比较的是引用是否相同；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String x = &quot;string&quot;;</span><br><span class="line">String y = &quot;string&quot;;</span><br><span class="line">String z = new String(&quot;string&quot;);</span><br><span class="line">System.out.println(&quot;x == y&quot;) ;// true;</span><br><span class="line">System.out.println(&quot;x == z&quot;);// false;</span><br><span class="line">System.out.println(&quot;x.equals(y&quot;); // true;</span><br><span class="line">System.out.println(&quot;x.equals(z)&quot;); // true;</span><br></pre></td></tr></table></figure>代码解读：因为x和y只向的是同一个引用，所以== 也是true,而new String()方法则重写开辟空间内存，所以==结果为false，而equals比较的一直是值，所以都为true。<h3 id="equals-解读"><a href="#equals-解读" class="headerlink" title="equals 解读"></a>equals 解读</h3>equals本质上就是== ，只不过String和Integer等重写了equals方法，把它变成了值得比较。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Cat&#123;</span><br><span class="line">    public Cat(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    private String name;</span><br><span class="line">    pbulic String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Cat c1 = new Cat(&quot;王磊&quot;);</span><br><span class="line">Cat c2 = new Cat(&quot;王磊&quot;);</span><br><span class="line">System.out.println(&quot;c1.equals(c2)&quot;); // false</span><br></pre></td></tr></table></figure>为什么会产生false，前面不是说比较的是值吗？<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj)&#123;</span><br><span class="line">    return (this == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>原来equals的本质就是==<br>为什么两个String对象，那么返回值为什么是true呢？<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = new String(&quot;helloworld&quot;);</span><br><span class="line">String s2 = new String (&quot;helloworld&quot;);</span><br><span class="line">System.out.println(&quot;s1.equals(s2)&quot;); //true</span><br></pre></td></tr></table></figure>查看String equals方法查看答案<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject)&#123;</span><br><span class="line">    if (this == anObject)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String)&#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        int n = value.length;</span><br><span class="line">        if (n == anotherString.value.length)&#123;</span><br><span class="line">            char v1[] = value;</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">             while(n-- != 0)&#123;</span><br><span class="line">                 if (v1[i] !=v2[i] )</span><br><span class="line">                   return false;</span><br><span class="line">                   i++;</span><br><span class="line">             &#125;</span><br><span class="line">             return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>String 重写了Object的equals方法，把引用比较改成了值比价<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4>== 对于基本类型来说是值比价，对于引用类型来说比较的是引用，而equals默认情况下是引用比价，只是很多类重写了equals方法，比如String， Integer 把他变成了值比较，所以一般情况下equals比价的是值是否相等。<h3 id="3-两个对象的hashCode-相同，则equals-也一定为true-对嘛？"><a href="#3-两个对象的hashCode-相同，则equals-也一定为true-对嘛？" class="headerlink" title="3.两个对象的hashCode()相同，则equals()也一定为true,对嘛？"></a>3.两个对象的hashCode()相同，则equals()也一定为true,对嘛？</h3></li><li>不对，两个对象的hashCode()相同，equals()也不一定相等<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;通话&quot;;</span><br><span class="line">String str2 = &quot;重地&quot;;</span><br><span class="line">System.out.println(&quot;String.format(&quot;str1: %d | str2: %d&quot;, str1.hashCode(), str2.hashCode()));</span><br><span class="line">System.out.println(&quot;str1.equals(str2)&quot;);</span><br><span class="line">//str1 : 1179395  str2: 1179395</span><br><span class="line">//false</span><br></pre></td></tr></table></figure>很显然hashCode相同但是equals为false，因为在散列表中，hashCode相等即两个键值对的哈希值相等，然而哈希值相等不能得出键值对相等。<h3 id="4-final-在Java中有什么作用？"><a href="#4-final-在Java中有什么作用？" class="headerlink" title="4. final 在Java中有什么作用？"></a>4. final 在Java中有什么作用？</h3></li><li>final 修饰的类叫做最终类，该类不能被继承</li><li>final修饰的方法不能被重写。</li><li>final修饰的变量叫常量，常亮必须初始化，初始化后不能被修改<h3 id="5-Java中Math-round-1-5-等于多少？"><a href="#5-Java中Math-round-1-5-等于多少？" class="headerlink" title="5.Java中Math.round(-1.5)等于多少？"></a>5.Java中Math.round(-1.5)等于多少？</h3>等于 -1， 因为在数轴上取值时，中间值(0.5)向右取整，所以正0.5是向上取整，-0.5直接舍弃。<h3 id="String属于基础的数据类型嘛？"><a href="#String属于基础的数据类型嘛？" class="headerlink" title="String属于基础的数据类型嘛？"></a>String属于基础的数据类型嘛？</h3>String不属于基础类型，基础类型只有8种，byet, boolean, char ,short, int , float, double, long 而Stirng 属于对象。<h3 id="7-Java中操作字符串有那些类，他们之间的区别是什么？"><a href="#7-Java中操作字符串有那些类，他们之间的区别是什么？" class="headerlink" title="7.Java中操作字符串有那些类，他们之间的区别是什么？"></a>7.Java中操作字符串有那些类，他们之间的区别是什么？</h3>操作字符串的类有：String, StringBuffer, StringBuilder.</li></ul><p>String 和 StringBuffer, StringBuilder 的区别在于String声明的都是不可变的对象，每次操作都会生成新的String对象， 然后将指针指向新的String对象，而StringBuffer，StringBuilder可以在原有对象的基础上进行操作，所以经常改变字符串内容的情况下最好不要使用String。</p><p>StringBuffer和StringBuilder的最大区别在于，StringBuffer是线程安全的，而StringBuilder是非线程安全的，但StringBuilder的性能要高于StringBuffer，所以在单线程环境下推荐使用StringBuilder，而多线程的环境下使用StringBuffer。</p><span id="more"></span><h3 id="8-String-str-“i”-和String-str-new-String-“i”-一样吗？"><a href="#8-String-str-“i”-和String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str = “i” 和String str = new String(“i”)一样吗？"></a>8.String str = “i” 和String str = new String(“i”)一样吗？</h3><p>不一样，因为内存的分配方式不一样。String str = “i”的方式，Java虚拟机会将其分配到常量池中，而String str = new String(“i”)则会被分配到堆内存中</p><h3 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9. 如何将字符串反转？"></a>9. 如何将字符串反转？</h3><p>使用 StringBuilder 或者 StringBuffer的reverse()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer stringBuffer = new StringBuffer();</span><br><span class="line">stringBuffer.append(&quot;abcdefg&quot;);</span><br><span class="line">System.out.prinlnt(&quot;stringBuffer.reverse()&quot;);//gfedcba</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-String-类的常用方法都有哪些"><a href="#10-String-类的常用方法都有哪些" class="headerlink" title="10. String 类的常用方法都有哪些?"></a>10. String 类的常用方法都有哪些?</h3><ul><li>indexOf(): 返回指定字符的索引</li><li>charAt(): 返回指定索引处的字符</li><li>replace():字符替换</li><li>trim(): 去除字符串两端空白</li><li>split(): 去分割字符串，返回一个分割后的字符串数组</li><li>getBytes(): 返回字符串的byte类数组</li><li>length():返回字符串长度</li><li>toLowerCase():将字符串转成些小写字母</li><li>toUpperCase():将字符串转化成大写字母</li><li>substring()：截取字符串。</li><li>equals():比较字符串<h3 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h3>不需要，抽象类不一定非要有抽象方法。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abstract class Cat&#123;</span><br><span class="line">    public static void sayHi()&#123;</span><br><span class="line">        System.out.println(&quot;hi~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">可以正常运行</span><br></pre></td></tr></table></figure><h3 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12.普通类和抽象类有哪些区别？"></a>12.普通类和抽象类有哪些区别？</h3></li><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化<h3 id="13-抽象类能使用final修饰嘛？"><a href="#13-抽象类能使用final修饰嘛？" class="headerlink" title="13.抽象类能使用final修饰嘛？"></a>13.抽象类能使用final修饰嘛？</h3>不能，定义抽象类就是让其他类继承的，如果定义为final该类就不能被继承，这样会彼此产生矛盾，所以final不能修饰抽象类<h3 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h3></li><li>实现： 抽象类的子类使用extends来继承； 接口必须使用implements来实现接口</li><li>构造函数：抽象类可以有抽象函数，接口不能有</li><li>main方法:抽象类中可以有main方法，并且我们能让他运行，但是接口不能含有main方法</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类</li><li>访问修饰符：接口中的方法默认使用public修饰，抽象类中的方法可以使任意访问修饰符<h3 id="15-Java中io流分为几种？"><a href="#15-Java中io流分为几种？" class="headerlink" title="15.Java中io流分为几种？"></a>15.Java中io流分为几种？</h3>按功能分：输入流(input)输出流(output).<br>按类型分：字节流和字符流<br>字节流和字符流的区别是：字节流按8位传输以字节为单位输出数据，字符流按16位传输以字符位单位输入数据。<h3 id="16-BIO-NIO-AIO有什么去区别？"><a href="#16-BIO-NIO-AIO有什么去区别？" class="headerlink" title="16.BIO, NIO, AIO有什么去区别？"></a>16.BIO, NIO, AIO有什么去区别？</h3></li><li>BIO: block io 同步阻塞式io，就是我们平常使用的传统io,他的特点是模式简单方便实用，并发处理能力低</li><li>NIO： new io 同步非阻塞 io, 是传统io的升级，客服端和服务器端都是通过Channel通讯，实现了多路复用</li><li>AIO: asynchronous io 是nio的升级，实现了异步非阻塞io,异步io的操作基于事件和回调机制。<h3 id="17-Files的常用方法有哪些"><a href="#17-Files的常用方法有哪些" class="headerlink" title="17.Files的常用方法有哪些"></a>17.Files的常用方法有哪些</h3></li><li>Files.exists():检测文件路径是否存在</li><li>Files.createFile():创建文件</li><li>Files.createDirectory():创建文件夹</li><li>Files.delete：删除一个文件或者目录</li><li>Files.copy()：复制一个文件</li><li>File.move();移动文件</li><li>File.size():查看文件数量</li><li>File.write()写入文件<h3 id="18-Java容器"><a href="#18-Java容器" class="headerlink" title="18.Java容器"></a>18.Java容器</h3>Collection :List, Queue, Set<br>List: Vector, ArrayList, LIstedList<br>Queue： ListQueue, PriorityQueue<br>Set: HashSet, TreeSet<br>Vector:Stack<br>Map:HashMap, TreeMap<br>HashSet:LinkHashSet<h3 id="19-Collection-和-Collections有什么区别"><a href="#19-Collection-和-Collections有什么区别" class="headerlink" title="19.Collection 和 Collections有什么区别"></a>19.Collection 和 Collections有什么区别</h3></li><li>java.util.Collection是一个集合接口(集合类的一个顶级接口)。它提供了对集合对象进行基本的操作的通用接口方法。collection接口在Java类库中有很多具体的体现。Collection接口的意义是为了各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List和Set.</li><li>Collections则是集合类的一个工具类/帮助类,期中提供了一系列的静态方法，用于对集合元素进行排序，搜索，以及线程安全等的各种操作。<h3 id="20-List-Set-Map-之间的区别是什么？"><a href="#20-List-Set-Map-之间的区别是什么？" class="headerlink" title="20. List, Set , Map 之间的区别是什么？"></a>20. List, Set , Map 之间的区别是什么？</h3></li></ul><h3 id="21-HashMap-和-Hashtable有什么区别？"><a href="#21-HashMap-和-Hashtable有什么区别？" class="headerlink" title="21.HashMap 和 Hashtable有什么区别？"></a>21.HashMap 和 Hashtable有什么区别？</h3><ul><li>hashMap去掉了HashTable 的contains方法，但是加上了containsValue()和containsKey()方法</li><li>hashTabble是同步的，而HashMap是非同步的，效率上要HashMap要更高</li><li>hashmap允许空键值对，而hashTable不允许<h3 id="22-如何决定使用hashMap还是TreeMap"><a href="#22-如何决定使用hashMap还是TreeMap" class="headerlink" title="22. 如何决定使用hashMap还是TreeMap"></a>22. 如何决定使用hashMap还是TreeMap</h3>对于在Map中插入，删除和定位元素这类操作，HashMap是最好的选择，然而加入你需要对一个有序的key集合进行遍历，TreeMap是更好地选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换位TreeMap进行有序的key的遍历。<h3 id="说一下hashMap的实现原理？"><a href="#说一下hashMap的实现原理？" class="headerlink" title="说一下hashMap的实现原理？"></a>说一下hashMap的实现原理？</h3>hashMap概述：HashMap 是基于哈希表的Map接口的非同步实现。此实现提供所有可选择的映射操作，并允许使用null值和null键。此类不保证映射得顺序，特别他不保证该顺序永久不变。<br>HashMap的数据结构： 在Java变成语言当中，最基本的接口就是两种，一个是数组，另一个是模拟指针(引用)，所有的数据结构都可以用这连个基本接口来构造，Hashmap也不例外，HashMap实际上是一个链表的散列的数据结构口，即数组和链表的结合体。<br>当我们往HashMap中put元素时，首先根据key的hashcode重新计算hash值，根据hash值得到的这个元素在数组中的位置（下标）如果该数组在该位置上已经存放了其他元素，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾，如果数组中该位置没有元素，那么直接将该元素放到数组的该位置上。<br>需要注意jdk 1.8 中对HashMap的实现坐了优化，当链表中的结点数据超过8个以后，该链表会转为红黑树来提高查询效率，从原来0(n)到O(logn)<h3 id="24-说一下HashSet的实现原理"><a href="#24-说一下HashSet的实现原理" class="headerlink" title="24.说一下HashSet的实现原理"></a>24.说一下HashSet的实现原理</h3></li><li>HashSet底层由HashMap实现</li><li>HashSet的值存放于hashMap的key上</li><li>HashMap的Value统一为Present<h3 id="25-ArryList-和LinkList的区别是什么？"><a href="#25-ArryList-和LinkList的区别是什么？" class="headerlink" title="25.ArryList 和LinkList的区别是什么？"></a>25.ArryList 和LinkList的区别是什么？</h3>最明显的区别是ArrayList底层数据结构是数组，支持随机访问，而LinkList的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList的时间复杂度是O(1)，而LinkList是O(n);<h3 id="26-如何实现数组和List之间的转换？"><a href="#26-如何实现数组和List之间的转换？" class="headerlink" title="26 如何实现数组和List之间的转换？"></a>26 如何实现数组和List之间的转换？</h3></li><li>List转换为数组：调用ArrayList的toArray方法</li><li>数组转化成List：调用Arrays的asList方法<h3 id="ArrayList-和-Vector-的区别是什么？"><a href="#ArrayList-和-Vector-的区别是什么？" class="headerlink" title="ArrayList 和 Vector 的区别是什么？"></a>ArrayList 和 Vector 的区别是什么？</h3></li><li>Vector是同步的，而Arraylist不是，然而你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList</li><li>ArrayList比Vector快，因为有同步不会过载</li><li>ArrayList更加通用，因为我们可以使用Collections工具类轻易的后去同步列表和只读列表<h3 id="28-Array和ArrayList有什么区别"><a href="#28-Array和ArrayList有什么区别" class="headerlink" title="28.Array和ArrayList有什么区别"></a>28.Array和ArrayList有什么区别</h3></li><li>Array可以容纳基本类型和对象，ArrayList只能容纳对象</li><li>Array是指定大小的，而ArrayList大小是固定的</li><li>Array没有提供ArrayList那么多功能比如 addAll，removeAll和iterator等<h3 id="29-在Queue中poll-和remove-有什么区别？"><a href="#29-在Queue中poll-和remove-有什么区别？" class="headerlink" title="29.在Queue中poll()和remove()有什么区别？"></a>29.在Queue中poll()和remove()有什么区别？</h3>poll()和remove()都是从队列中取出一个元素，但是poll()在获取元素失败时会返回空，但是remove()失败时候会抛出异常<h3 id="30-哪些集合类是线程安全"><a href="#30-哪些集合类是线程安全" class="headerlink" title="30.哪些集合类是线程安全"></a>30.哪些集合类是线程安全</h3></li><li>vector</li><li>stack</li><li>hashtavle</li><li>enumration<h3 id="31-迭代器Iterator"><a href="#31-迭代器Iterator" class="headerlink" title="31.迭代器Iterator"></a>31.迭代器Iterator</h3>迭代器是一种设计模式，他是一个对象，他可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构，迭代器通常被称为轻量级对象，因为创建他代价小<h3 id="32-Iterator怎么使用？有设么特点"><a href="#32-Iterator怎么使用？有设么特点" class="headerlink" title="32.Iterator怎么使用？有设么特点"></a>32.Iterator怎么使用？有设么特点</h3>Java中的Iterator功能比价简单，并且只能单向移动：</li></ul><p>1.使用方法iterator()要求容器返回一个iterator.第一次调用Iterator的next()方法时，它返回序列的第一个元素<br>2.使用next()获得序列中的下一个元素<br>3.使用hasNext()检查序列中是否还有元素<br>4.使用remove()将迭代器新返回的元素删除<br>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h3 id="33-Iterator和ListIterator有什么区别"><a href="#33-Iterator和ListIterator有什么区别" class="headerlink" title="33.Iterator和ListIterator有什么区别"></a>33.Iterator和ListIterator有什么区别</h3><ul><li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。</li><li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java基础知识点&quot;&gt;&lt;a href=&quot;#Java基础知识点&quot; class=&quot;headerlink&quot; title=&quot;Java基础知识点&quot;&gt;&lt;/a&gt;Java基础知识点&lt;/h1&gt;&lt;h4 id=&quot;1-JDK-和-JRE有什么区别？&quot;&gt;&lt;a href=&quot;#1-JDK-和-JRE有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1.JDK 和 JRE有什么区别？&quot;&gt;&lt;/a&gt;1.JDK 和 JRE有什么区别？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;JDK： Java Development Kit 的简称， Java 开发工具包， 提供Java的开发环境 和运行环境。&lt;/li&gt;
&lt;li&gt;JRE： Java Runtime Environment的简称， Java 的运行环境，为Java提供了运行所需要的环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体来说JDK其实包含了JRE， 同时还包含了编译Java源码的编译器javac,还包含很多Java程序调试和分析的工具，简单来讲你需要运行Java程序，只需要安装jre就可以了，如果你需要编写Java程序，需要安装jdk。&lt;/p&gt;
&lt;h4 id=&quot;2-和equals的区别是什么？&quot;&gt;&lt;a href=&quot;#2-和equals的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;2. == 和equals的区别是什么？&quot;&gt;&lt;/a&gt;2. == 和equals的区别是什么？&lt;/h4&gt;&lt;h5 id=&quot;解读&quot;&gt;&lt;a href=&quot;#解读&quot; class=&quot;headerlink&quot; title=&quot;==解读&quot;&gt;&lt;/a&gt;==解读&lt;/h5&gt;&lt;p&gt;对于基本类型和引用类型==的作用是不相同的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型：比较的是值是否形同；&lt;/li&gt;
&lt;li&gt;引用类型比较的是引用是否相同；&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String x = &amp;quot;string&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String y = &amp;quot;string&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String z = new String(&amp;quot;string&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;x == y&amp;quot;) ;// true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;x == z&amp;quot;);// false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;x.equals(y&amp;quot;); // true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;x.equals(z)&amp;quot;); // true;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
代码解读：因为x和y只向的是同一个引用，所以== 也是true,而new String()方法则重写开辟空间内存，所以==结果为false，而equals比较的一直是值，所以都为true。&lt;h3 id=&quot;equals-解读&quot;&gt;&lt;a href=&quot;#equals-解读&quot; class=&quot;headerlink&quot; title=&quot;equals 解读&quot;&gt;&lt;/a&gt;equals 解读&lt;/h3&gt;equals本质上就是== ，只不过String和Integer等重写了equals方法，把它变成了值得比较。&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Cat&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Cat(String name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pbulic String getName()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setName(String name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cat c1 = new Cat(&amp;quot;王磊&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cat c2 = new Cat(&amp;quot;王磊&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;c1.equals(c2)&amp;quot;); // false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
为什么会产生false，前面不是说比较的是值吗？&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public boolean equals(Object obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (this == obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
原来equals的本质就是==&lt;br&gt;为什么两个String对象，那么返回值为什么是true呢？&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s1 = new String(&amp;quot;helloworld&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String s2 = new String (&amp;quot;helloworld&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;s1.equals(s2)&amp;quot;); //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
查看String equals方法查看答案&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public boolean equals(Object anObject)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (this == anObject)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (anObject instanceof String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String anotherString = (String)anObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int n = value.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (n == anotherString.value.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            char v1[] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            char v2[] = anotherString.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             while(n-- != 0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 if (v1[i] !=v2[i] )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
String 重写了Object的equals方法，把引用比较改成了值比价&lt;h4 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h4&gt;== 对于基本类型来说是值比价，对于引用类型来说比较的是引用，而equals默认情况下是引用比价，只是很多类重写了equals方法，比如String， Integer 把他变成了值比较，所以一般情况下equals比价的是值是否相等。&lt;h3 id=&quot;3-两个对象的hashCode-相同，则equals-也一定为true-对嘛？&quot;&gt;&lt;a href=&quot;#3-两个对象的hashCode-相同，则equals-也一定为true-对嘛？&quot; class=&quot;headerlink&quot; title=&quot;3.两个对象的hashCode()相同，则equals()也一定为true,对嘛？&quot;&gt;&lt;/a&gt;3.两个对象的hashCode()相同，则equals()也一定为true,对嘛？&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;不对，两个对象的hashCode()相同，equals()也不一定相等&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str1 = &amp;quot;通话&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str2 = &amp;quot;重地&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;String.format(&amp;quot;str1: %d | str2: %d&amp;quot;, str1.hashCode(), str2.hashCode()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;str1.equals(str2)&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//str1 : 1179395  str2: 1179395&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
很显然hashCode相同但是equals为false，因为在散列表中，hashCode相等即两个键值对的哈希值相等，然而哈希值相等不能得出键值对相等。&lt;h3 id=&quot;4-final-在Java中有什么作用？&quot;&gt;&lt;a href=&quot;#4-final-在Java中有什么作用？&quot; class=&quot;headerlink&quot; title=&quot;4. final 在Java中有什么作用？&quot;&gt;&lt;/a&gt;4. final 在Java中有什么作用？&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;final 修饰的类叫做最终类，该类不能被继承&lt;/li&gt;
&lt;li&gt;final修饰的方法不能被重写。&lt;/li&gt;
&lt;li&gt;final修饰的变量叫常量，常亮必须初始化，初始化后不能被修改&lt;h3 id=&quot;5-Java中Math-round-1-5-等于多少？&quot;&gt;&lt;a href=&quot;#5-Java中Math-round-1-5-等于多少？&quot; class=&quot;headerlink&quot; title=&quot;5.Java中Math.round(-1.5)等于多少？&quot;&gt;&lt;/a&gt;5.Java中Math.round(-1.5)等于多少？&lt;/h3&gt;等于 -1， 因为在数轴上取值时，中间值(0.5)向右取整，所以正0.5是向上取整，-0.5直接舍弃。&lt;h3 id=&quot;String属于基础的数据类型嘛？&quot;&gt;&lt;a href=&quot;#String属于基础的数据类型嘛？&quot; class=&quot;headerlink&quot; title=&quot;String属于基础的数据类型嘛？&quot;&gt;&lt;/a&gt;String属于基础的数据类型嘛？&lt;/h3&gt;String不属于基础类型，基础类型只有8种，byet, boolean, char ,short, int , float, double, long 而Stirng 属于对象。&lt;h3 id=&quot;7-Java中操作字符串有那些类，他们之间的区别是什么？&quot;&gt;&lt;a href=&quot;#7-Java中操作字符串有那些类，他们之间的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;7.Java中操作字符串有那些类，他们之间的区别是什么？&quot;&gt;&lt;/a&gt;7.Java中操作字符串有那些类，他们之间的区别是什么？&lt;/h3&gt;操作字符串的类有：String, StringBuffer, StringBuilder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String 和 StringBuffer, StringBuilder 的区别在于String声明的都是不可变的对象，每次操作都会生成新的String对象， 然后将指针指向新的String对象，而StringBuffer，StringBuilder可以在原有对象的基础上进行操作，所以经常改变字符串内容的情况下最好不要使用String。&lt;/p&gt;
&lt;p&gt;StringBuffer和StringBuilder的最大区别在于，StringBuffer是线程安全的，而StringBuilder是非线程安全的，但StringBuilder的性能要高于StringBuffer，所以在单线程环境下推荐使用StringBuilder，而多线程的环境下使用StringBuffer。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java基础" scheme="https://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>web_sevice</title>
    <link href="https://yoursite.com/2019/12/17/web-sevice/"/>
    <id>https://yoursite.com/2019/12/17/web-sevice/</id>
    <published>2019-12-17T09:40:40.000Z</published>
    <updated>2019-12-17T09:41:23.033Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web-sevice技术"><a href="#web-sevice技术" class="headerlink" title="web sevice技术"></a>web sevice技术</h4><h3 id="webservice技术概括"><a href="#webservice技术概括" class="headerlink" title="webservice技术概括:"></a>webservice技术概括:</h3><p> 1.<a href="http://www.webxml.com.cn/zh_cn/web_services.aspx">http://www.webxml.com.cn/zh_cn/web_services.aspx</a> webserive 免费服务，跨语言跨平台的语言服务，多个系统之间的交互和数据传递。<br> 2.Java中有三种Webserviec规范，JAX-WS,JAXM JAX-RS三种规范(1,3较多，3流行)，webService三要素 soap，wsdl,uddi<br> 3.JAX-WS（JAVA API FOR XML-WEBSERVICE）:<br> 4.Soap协议 ： http的基础上+xml数据，基于ws规范下协议，soap基于http<br> 5.wsdl：xml文件，通过这个文件描述webservice描述这个接口，接口的参数和返回类型<br> 6.uddi：命名服务，发布到公网时需要使用，<br> 7.企业中有很多系统，kpi系统考核系统，erp客户资源管理系统，我们需要统一资源管理和用户的授权，在不同的系统中需要调用平台的接口（如何获取-&gt; webservice），了解基于服务的架构设计<br> 8.有点，异构平台的互通性不同系统中的架构通信，和软件复用，传输xml数据，很方便的开发，缺点:xml会传输与内容无关的内容，基于soap协议(c和s转换机制)<br> 9.SOA面向服务的架构，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;web-sevice技术&quot;&gt;&lt;a href=&quot;#web-sevice技术&quot; class=&quot;headerlink&quot; title=&quot;web sevice技术&quot;&gt;&lt;/a&gt;web sevice技术&lt;/h4&gt;&lt;h3 id=&quot;webservice技术概括&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web前端</title>
    <link href="https://yoursite.com/2019/12/17/web%E5%89%8D%E7%AB%AF/"/>
    <id>https://yoursite.com/2019/12/17/web%E5%89%8D%E7%AB%AF/</id>
    <published>2019-12-17T09:38:13.000Z</published>
    <updated>2019-12-17T09:39:56.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p> 1.<meta>是一个自结束标签，设置一些网页的原始数据也可以这样写L<meta charset="utf-8">告诉浏览器的页面编码为utf-8防止乱码设置字符集，html编码和浏览器解码需要保持一样,还可以设置网页的关键字<meta name="keywords" content="HTML5,javascript,前段,java"><br> 还可以指定网页的描述 <meta name="description" content="发布">搜索引擎在检索页面时也会检索关键字，还可以重定向 <meta http-equiv="refresh" content=":5;网址url"><br> <span id="more"></span><br> 2.相对路径：相对当前资源的路径。<br> 3.绝对路径: <img src="/.com//img/2.gif" alt="这是一个大松树"><br> 4.图片格式有： jpeg(支持颜色比较多可以压缩，但是不支持透明，照片格式),gif(支持颜色少，支持简单透明，动态图),png(比较全能，但是不支持动态图可用颜色复杂，开发用的较多),jpg,效果一致使用jpg，占用内存小<br> 5. 超链接 <a>标签，内联标签<iframe>，在超链接中普通的<a>标签中超链接在原网页打开，若想要在新页面打开可以用<a>中的target属性：&lt;target = “_blank”&gt;</a></a></iframe></a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;p&gt; 1.&lt;meta&gt;是一个自结束标签，设置一些网页的原始数据也可以这样写L&lt;meta charset=&quot;utf-8&quot;&gt;告诉浏览器的页面编码为utf-8防止乱码设置字符集，html编码和浏览器解码需要保持一样,还可以设置网页的关键字&lt;meta name=&quot;keywords&quot; content=&quot;HTML5,javascript,前段,java&quot;&gt;&lt;br&gt; 还可以指定网页的描述 &lt;meta name=&quot;description&quot; content=&quot;发布&quot;&gt;搜索引擎在检索页面时也会检索关键字，还可以重定向 &lt;meta http-equiv=&quot;refresh&quot; content=&quot;:5;网址url&quot;&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="-前端" scheme="https://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>&#39;ssm整合crud&#39;</title>
    <link href="https://yoursite.com/2019/12/11/ssm%E6%95%B4%E5%90%88crud/"/>
    <id>https://yoursite.com/2019/12/11/ssm%E6%95%B4%E5%90%88crud/</id>
    <published>2019-12-11T08:01:39.000Z</published>
    <updated>2019-12-11T08:02:11.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于ssm整合和crud操作的一个小demo"><a href="#基于ssm整合和crud操作的一个小demo" class="headerlink" title="基于ssm整合和crud操作的一个小demo"></a>基于ssm整合和crud操作的一个小demo</h3><p>1.出现错误plugins-2-2,在pox.xml中添加如下代码解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>1.自动注入失败可能没开启包的扫描，查询配置文件是否扫描dao,service,在dao,service上是否有注解<br>2.加强代码逻辑的思考，注意配置文件里面的内容</p><hr><h4 id="Resource结构"><a href="#Resource结构" class="headerlink" title="Resource结构"></a>Resource结构</h4><p>1.数据库连接配置文件c3p0.properties，里面包含url,driverclass,user,password,maxPoolSize,minPoolSize,initiaPoolSize,maxIdleTime<br>2.在friendMapper.xml中定义接口映射文件<mapper namespace=".....dao.friendMapper"><select id="方法名" resulttype="结果对象"><br>在mybatis-config <configuration><br><typeAliases><br><package name="...bean"><br></package></typeAliases><br>3.spring-config 包含两个配置文件applicationContext.xml和springmvc.xml<br>在applicationContext.xml中含有几点：</configuration></select></mapper></p><ul><li>读取c3p0.properties配置文件</li><li>配置数据源(dataSource class:ComboPooledDataSource properties)</li><li>开启事务注解扫描&lt;tx:annotation-driven transaction-manager&gt;</li><li>spring事务管理器</li><li>mybatis和spring整合</li><li>开启Mapper接口扫描器扫描Dao层</li><li>开启spring  IOC注解扫描扫描service层<br>在springmvc中配置：</li><li>使用注解扫描器扫描@Controller</li><li>加载注解驱动</li><li>处理静态资源</li><li>配置视图解析器</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基于ssm整合和crud操作的一个小demo&quot;&gt;&lt;a href=&quot;#基于ssm整合和crud操作的一个小demo&quot; class=&quot;headerlink&quot; title=&quot;基于ssm整合和crud操作的一个小demo&quot;&gt;&lt;/a&gt;基于ssm整合和crud操作的一个小de</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://yoursite.com/2019/11/18/json-%E5%92%8C-Ajax/"/>
    <id>https://yoursite.com/2019/11/18/json-%E5%92%8C-Ajax/</id>
    <published>2019-11-18T12:17:59.180Z</published>
    <updated>2019-12-16T13:54:05.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax和json"><a href="#Ajax和json" class="headerlink" title="Ajax和json"></a>Ajax和json</h3><p>同步和异步的概念和区别：<br>1.同步：客户端必须等待服务器的响应，在等待客户端不能做别的操作<br>2.异步：客户端在等待服务器端的响应过程中，可以做其他操作，ajax不更新整个页面的前提下完成与后台数据的获取</p><hr><p>1.原生Ajax方式了解即可用的不多<br>2.JQeuryf实现Ajaxy异步实现：<br> $.ajax()   语法：$.ajax({z键值对})  ;<br> $.get()<br> $.post()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">实际例子：</span><br><span class="line">需要引入jq中的ajax文件&lt;script src =&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//定义方法</span><br><span class="line">function fun()&#123;</span><br><span class="line">    //使用$.ajax()发送异步请求</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:&quot;ajaxServlet&quot;,//请求路径</span><br><span class="line">        type:&quot;POST&quot;, //请求方式</span><br><span class="line">  //    date:&quot;username=jack&amp;age=23&quot;,//请求参数</span><br><span class="line">        date:&#123;&quot;username&quot;:jack&quot;,&quot;age&quot;:23&#125;,</span><br><span class="line">        success:function(date)&#123;</span><br><span class="line">            //响应成功后的回调函数</span><br><span class="line">            alert(date); //弹出警告</span><br><span class="line">        &#125;,</span><br><span class="line">        error:function()&#123;</span><br><span class="line">            //如果q响应出错，会执行的回调函数</span><br><span class="line">            alert(&quot;出错了&quot;)</span><br><span class="line">        &#125;,//注意要写逗号，最后一个不写逗号</span><br><span class="line">        dateType:&quot;text&quot;//设置了响应数据的格式</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">---</span><br><span class="line">$.get()发送get请求</span><br><span class="line">$.$.get(url,[data],[callback],[type])</span><br><span class="line">url:请求路径，请求参数，回调函数，响应结果的类型</span><br><span class="line">function fun()&#123;</span><br><span class="line">    $.get(&quot;ajaxServlet&quot;,&#123;username:&quot;rose&quot;&#125;,function()&#123;</span><br><span class="line">        alter(data);</span><br><span class="line">    &#125;,&quot;text&quot;);</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">function fun()&#123;</span><br><span class="line">    $.post(&quot;ajaxServlet&quot;,&#123;username:&quot;rose&quot;&#125;,function()&#123;</span><br><span class="line">        alter(data);</span><br><span class="line">    &#125;,&quot;text&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>1.概念 javaScript对象表示法<br>var p = {“name”:”张三”,”age”：23,”gender”:”男”};</p><ul><li>json现在多用于储存和交换文本信息的语法，比xml更小更快</li></ul><ol start="2"><li>语法</li></ol><ul><li><p>基本规则：数据在名称/值对中：json由键值对构成的键用引号（单双都可也可不使用<br> 1.数字<br> 2.字符串<br> 3.逻辑值<br> 4.数组{“persons”:[{},{}]}<br> 5.对象</p></li><li><p>，多个键值对由逗号分隔</p></li><li><p>，花括号保存对象使用{}定义json格式，方括号保存数组:[]</p></li><li><p>获取数据：</p><ol><li>json对象，键名</li><li>json对象[“键名”]</li><li>数组对象[索引]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var name = person.name;</span><br><span class="line">或  var name1 = persions.person[2].name;</span><br><span class="line">//获取person对象中所有的键和值</span><br><span class="line">//for in </span><br><span class="line">for(var key in person)&#123;</span><br><span class="line">    alert(key+&quot;person[key]&quot;);//不可以用person.key</span><br><span class="line">&#125;</span><br><span class="line">//获取ps中所有的值</span><br><span class="line">for &#123;(var i = 0; i &lt; ps.length;i++)&#123;</span><br><span class="line">    var p = ps[i];</span><br><span class="line">    for(var key in p)&#123;</span><br><span class="line">        alter(key+&quot;:&quot;+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json的数据和java数据的相互转换"><a href="#json的数据和java数据的相互转换" class="headerlink" title="json的数据和java数据的相互转换"></a>json的数据和java数据的相互转换</h3></li></ol></li><li><p>json解析器：</p><pre><code>常见解析器Jsonlib,fastjson,gson,jackson(springmvc内置解析器)</code></pre></li></ul><ol><li><p>json转化为java对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1.创建map对象</span><br><span class="line">String json = &quot;&#123;&quot;gender&quot;:&quot;男&quot;,&quot;&quot;&#125;&quot;</span><br><span class="line">//2.转换readValue</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">Person person = mapper.readValue(json,Person.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>java对象转换为json</p><ol><li>使用步骤导入相关jar包</li><li>创建一个jackson的核心对象objecMapper</li><li>调用objectMapper的相关方法进行转化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    //生成get/set方法和toString</span><br><span class="line">&#125;</span><br><span class="line">//测试类</span><br><span class="line">public class Jackson&#123;</span><br><span class="line">    //java对象转化为Json字符串</span><br><span class="line">    @Test</span><br><span class="line">    public void  test1()&#123;</span><br><span class="line">        Person p = new Person();</span><br><span class="line">        p.setName(&quot;张三&quot;);</span><br><span class="line">        p.setAge(32);</span><br><span class="line">        p.setGender(&quot;男&quot;)；</span><br><span class="line">    &#125;</span><br><span class="line">    //2.创建Jackson的核心对象 ObjectMapper</span><br><span class="line">    ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">    //3.转换</span><br><span class="line">    /*</span><br><span class="line">    转换方法：</span><br><span class="line">       writeValue(参数1，obj)； 参数1，File:将obj对象转换为json对象，保存到指定文件中</span><br><span class="line">       /Writer/OutputStream--</span><br><span class="line">       writeValueAsString(obj);将对象转换为json字符串</span><br><span class="line">    */</span><br><span class="line">      String json = mapper.writeValueAsStrinp(p);</span><br><span class="line">     //mapper.writeValue(new File(&quot;d:/a.txt&quot;)):将数据写到</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注解：<br>@JsonIgnore:排除属性（在java转字符串时忽略这个属性比如date）<br>@JsonFormat：属性的格式化 (date: @JsonFormat(pattern:”yyyy-MM-dd”)</li></ol></li><li><p>复杂java对象转换</p></li><li><p>List数组</p></li><li><p>map 键值对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">校验用户名:</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function ()&#123; // 给username绑定blu事件离焦事件r</span><br><span class="line">    $(&quot;#username&quot;).blur(function()&#123;</span><br><span class="line">           //获取username文本输入框的值</span><br><span class="line">          var username =  $(this).val();</span><br><span class="line">           //发送ajax请求</span><br><span class="line">           //期望服务器返回的数据格式&#123;&quot;userExis&quot;:true,&quot;msy&quot;:&quot;请换一个&quot;&#125;</span><br><span class="line">           $.get(&quot;findUserServlet&quot;,&#123;username:username&#125;,function(data)&#123;</span><br><span class="line">               //判断userExsit键的值是否为true</span><br><span class="line">               var span = $(&quot;#s_username&quot;);</span><br><span class="line">               if(data.userExsit)&#123;</span><br><span class="line">                   //用户名存在</span><br><span class="line">                   span.css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                   span.html(data.msg);</span><br><span class="line">               &#125;else&#123;</span><br><span class="line">                   //用户名不存在</span><br><span class="line">                    span.css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                   span.html(data.msg);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,&quot;json&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">  &lt;from&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; name =&quot;username&quot; palaceholder=&quot;请输入用户名&quot;&gt;&lt;br&gt;</span><br><span class="line">  &lt;span id = &quot;s_username&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; values=&quot;注册&quot;&gt;&lt;br&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  前端代码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">后端</span><br><span class="line">//1.获取用户名</span><br><span class="line">String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">//2.调用service查询用户名是否存在</span><br><span class="line">//3.期待服务器响应返回的数据格式</span><br><span class="line">//4.将map转为json</span><br><span class="line">//解决中文乱码问题</span><br><span class="line">response.setContentType(&quot;text/html;charact=utf-8&quot;);</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">//将数据传给客户端</span><br><span class="line">mapper.witerValue(response.getWriter(),map);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务器响应的数据在客户端使用时，要想当做json数据格式使用时<br>1.$.get(type),将最后一个type指定为json<br>2.在服务器端设置个json类型<br>response.setContentType(“application/json,characset=utf-8”);</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Ajax和json&quot;&gt;&lt;a href=&quot;#Ajax和json&quot; class=&quot;headerlink&quot; title=&quot;Ajax和json&quot;&gt;&lt;/a&gt;Ajax和json&lt;/h3&gt;&lt;p&gt;同步和异步的概念和区别：&lt;br&gt;1.同步：客户端必须等待服务器的响应，在等待客户端不</summary>
      
    
    
    
    
  </entry>
  
</feed>
